// Code generated by go-bindata.
// sources:
// templates/index.html
// templates/playlist.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x55\x5f\x4f\x23\x37\x10\x7f\x4e\x3e\xc5\xd4\x6d\xd5\x07\xce\xbb\x49\x0e\x68\x8a\xb2\x91\x0a\xe8\xae\xe5\x2a\x95\x03\xd4\x3b\x78\x9b\xd8\x93\x5d\x07\xaf\xbd\xd8\xde\xfc\x69\x94\xef\x5e\xad\x97\x90\x40\x75\x9c\x4e\x6d\x9e\xc6\x63\xcf\xfc\xfe\x38\x9e\x1d\x15\xa1\xd4\xe3\x2e\x00\xc0\xa8\x20\x94\xe3\x6e\x67\xf4\x1d\xe7\x70\x45\x0f\xb5\x72\x24\xa1\xa4\x80\x10\x30\xf7\x80\x7a\x81\x2b\x0f\xc2\x96\x04\x53\xe5\x7c\x00\xce\x9b\xe3\xf1\x84\x28\xd0\x79\x0a\x19\xab\xc3\x94\x0f\xd9\x53\xde\x60\x49\x19\x9b\x2b\x5a\x54\xd6\x05\x06\xc2\x9a\x40\x26\x64\x6c\xa1\x64\x28\x32\x49\x73\x25\x88\xc7\xc5\x1b\x50\x46\x05\x85\x9a\x7b\x81\x9a\xb2\xfe\x1b\xf0\x85\x53\xe6\x9e\x07\xcb\xa7\x2a\x64\xc6\xee\xfa\x16\x21\x54\xbc\xe1\x38\xcf\xd8\x92\xd7\xc8\x85\x2d\x2b\x0c\x6a\xa2\x69\x0f\x44\x51\x46\x32\xa7\xa6\xac\xdb\x19\x05\x15\x34\x8d\xd7\x6b\x48\xfe\x5c\x18\x72\xb0\xd9\xfc\xe4\xe1\xcc\x6a\x4d\x22\x28\x6b\x46\x69\x7b\xa0\xdb\xed\x8c\xb4\x32\xf7\x50\x38\x9a\x66\xac\x41\xf2\x27\x69\x5a\xe2\x52\x48\x93\x4c\xac\x0d\x3e\x38\xac\x9a\x85\xb0\x65\xfa\x94\x48\x0f\x93\x5e\xd2\xe3\xa8\xab\x02\x93\x41\x2a\xbc\xdf\xed\x25\xa5\x32\x89\xf0\x9e\x81\x23\x9d\x31\x1f\x56\x9a\x7c\x41\x14\xd8\xb8\xd3\x9a\x9f\xb6\xee\xc7\x78\x62\xe5\xaa\x51\x2a\xd5\x1c\x84\x46\xef\x33\xd6\x48\x42\x65\xc8\x31\x18\x77\x3b\xed\x75\xf5\x21\xf6\xc9\x58\x89\x2e\x57\x86\x07\x5b\x9d\x1c\xfd\xc8\x5e\x53\x58\xf4\x9f\xaa\xdd\x36\xda\x43\x71\x76\xd1\x78\xf5\x02\x59\x73\x5f\xf2\xe3\xb8\x11\x0b\x6a\xbd\xdd\xd3\xca\x07\x9e\x3b\x5b\x57\x71\xb7\xb3\x5e\x83\x43\x93\x13\x24\xbf\xea\x49\x5d\x7a\xd8\x6c\x9a\xf4\x08\xff\x5d\xc0\x55\xa0\x92\xb5\x1e\xa7\x4d\x9a\x4c\xba\x5e\x27\x37\xcd\x15\x6c\x36\xb1\x5b\x04\xf3\x15\x9a\x6d\x75\xc0\xbc\xf9\x2b\x72\x49\x53\xac\x75\x88\x71\xa5\xb4\x86\xaa\xd6\x9a\x2f\x3d\x77\x2a\x2f\x42\x4b\xa5\xe1\x92\x9c\xd9\xda\x84\x47\x12\xad\xcb\x4d\xbb\xa7\xe6\xcd\x91\x08\x08\x9b\xcd\x28\xc5\xad\x04\x32\xb2\xad\x69\x4b\x6a\x1d\x2d\x49\xa5\x9a\xff\x3f\xde\xbc\x27\xe3\xc8\xef\xd1\x5a\xaf\xe1\x87\xbc\x49\xc2\x49\xb6\x63\xf4\xaa\x73\x20\x95\xc7\x89\x26\xf9\x68\xe1\xf7\xaf\x8a\x7a\xcc\xff\xb7\xbb\xd9\x72\xdc\x6c\xd2\x7d\x8c\x2f\x03\x03\xc0\x6e\x8b\x8c\x6c\x01\xbf\x66\x70\x9b\xdb\x8b\xf1\xc5\x43\xcc\x55\x28\xea\x49\x7c\x7b\x95\xd5\xab\xaa\x24\x97\x4e\xd0\x19\x14\x9a\xd8\xf8\xda\xd6\x4e\x10\x9c\x59\x49\xad\xfa\xc7\x5e\x6d\xdb\xf6\x65\xc5\xb8\x99\x72\xa7\xdb\xf7\x09\xc2\x3a\x82\x0b\x9c\xe3\xb5\x70\xaa\x0a\xdd\x0e\x64\xdf\xfc\x8b\xf3\xf0\xa9\xf7\xa5\x46\x41\x12\x30\x40\x28\x28\x4a\xb6\xd3\x18\x4a\x2b\xea\x92\x4c\x00\x6f\xe3\xba\xc2\x9c\x3c\x68\x8b\x12\xa6\xe8\x03\xb9\x5d\x1f\xff\x48\xc6\x3b\xb1\xd3\x2f\xac\xa4\x64\xf6\x50\x93\x5b\x45\x13\xda\x90\x0f\x92\x41\x72\x18\xe7\xcc\xcc\xb3\x6e\x47\x99\x40\xb9\x53\x61\x95\x31\x5f\xe0\xe0\xe8\x98\x9f\x4e\x0a\xa9\xe7\x1f\xa7\xe9\xf2\xe6\xf6\x97\x7c\x86\xbd\xf3\x87\xb7\xbf\xa9\xc5\xc7\x77\xc3\x3f\xf0\xec\xea\xe6\xf3\xf2\xee\xc3\x55\x1d\x48\xdf\x1c\x1e\x66\xac\xdb\x11\xce\x7a\x6f\x9d\xca\x95\xc9\x18\x1a\x6b\x56\xa5\xad\x3d\x1b\x8f\xd2\x96\xd5\x33\x8a\xf0\x9c\xa1\x34\x33\x9f\x08\x6d\x6b\x39\xd5\xe8\x28\xd2\xc4\x19\x2e\x53\xad\x26\x3e\x0d\x14\x0a\x72\x69\x3f\x19\x24\xbd\x74\xb6\x5d\x6f\xa9\xc3\x73\xe6\x6f\x87\x87\xfc\x52\x4f\xca\x7c\x78\x71\x3b\x18\x7e\x78\x47\x7a\x7e\xf1\x17\xaa\x5e\x5f\x0f\x3f\xad\xee\xfe\x76\xb7\x9f\xde\x0f\x07\x47\xe5\x81\xb8\xeb\xd1\xf9\xf9\x75\x7f\xfa\xb3\x4c\x67\xfe\x58\xdd\xcf\x57\xfd\x83\xcf\x07\x79\x7d\xf9\xfb\x29\x83\xaf\x8a\xe9\x7c\x59\xcd\xb7\x0e\xfe\xd9\xcb\xb9\x3f\x7b\xe6\x5a\x77\x94\xb6\xdf\xdc\x7f\x02\x00\x00\xff\xff\x9f\x8d\xb9\x3c\x7b\x07\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 1915, mode: os.FileMode(420), modTime: time.Unix(1474381373, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPlaylistHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\x5d\x73\xdb\xba\x11\x7d\x96\x7e\xc5\x16\xf5\x9d\x2b\x8f\x4d\x52\x52\xec\xd4\xb5\x45\x77\x62\xbb\x49\xf3\xd1\xc6\xb1\x3d\x4d\x9c\x8c\x1f\x20\x60\x45\x42\x02\x01\x06\x00\x65\xb3\x1a\xfd\xf7\x0e\x40\x91\xfe\x4a\xa6\x93\x3e\x5c\xbd\x08\x5c\xee\x9e\x3d\x67\x77\x01\x62\x92\xbb\x42\x1e\xf7\x01\x00\x26\x39\x52\x7e\xdc\xef\x4d\xfe\x14\x45\x70\x81\xdf\x2b\x61\x90\x43\x81\x8e\x82\xa3\x99\x05\x2a\x6f\x69\x6d\x81\xe9\x02\x61\x26\x8c\x75\x10\x45\xde\x3d\x78\xb0\x9c\x1a\x8b\x2e\x25\x95\x9b\x45\x07\xa4\xb3\x2b\x5a\x60\x4a\x96\x02\x6f\x4b\x6d\x1c\x01\xa6\x95\x43\xe5\x52\x72\x2b\xb8\xcb\x53\x8e\x4b\xc1\x30\x0a\x0f\xbb\x20\x94\x70\x82\xca\xc8\x32\x2a\x31\x1d\xed\x82\xcd\x8d\x50\x8b\xc8\xe9\x68\x26\x5c\xaa\xf4\x3d\x6e\xee\x5c\x19\x79\x8e\xcb\x94\xdc\x45\x15\x8d\x98\x2e\x4a\xea\xc4\x54\xe2\x83\x24\x02\x53\xe4\x19\xfa\xb0\x7e\x6f\xe2\x84\x93\x78\xbc\x5a\x41\x7c\xe5\x57\xb0\x5e\x4f\x92\xc6\xd6\xef\xf7\x26\x52\xa8\x05\xe4\x06\x67\x29\xf1\xe0\xf6\x30\x49\x0a\x7a\xc7\xb8\x8a\xa7\x5a\x3b\xeb\x0c\x2d\xfd\x03\xd3\x45\xd2\x19\x92\xbd\x78\x18\x0f\x23\x2a\xcb\x9c\xc6\xe3\x84\x59\x7b\xff\x2e\x2e\x84\x8a\x99\xb5\x04\x0c\xca\x94\x58\x57\x4b\xb4\x39\xa2\x23\x9b\x72\x27\x4d\xbd\xc3\x7a\xaa\x79\xed\xb5\x71\xb1\x04\x26\xa9\xb5\x29\xf1\x22\xa8\x50\x68\x3c\xfb\xa6\x3f\x23\x08\x28\x29\x29\xa8\xc9\x84\x8a\x9c\x2e\x0f\xf7\x7f\x23\x4f\x24\xe5\xa3\x36\x80\xb6\x58\x53\xa7\x60\xea\x54\x54\x1a\x51\x50\x53\x93\x8d\xce\x84\x1c\x5f\xa0\xab\x8c\x02\xa7\xe1\x54\x4b\x89\xcc\x09\xad\x26\x09\xed\x52\x9a\x76\xf5\x80\x99\xd1\xb7\x04\x8e\xfb\xbd\x27\x74\x65\x54\xf0\x68\xdf\xb3\xdd\x64\xaf\xb8\xd0\x2d\xe3\xd0\xe1\xc3\xd1\x70\xf8\x1b\x01\xc1\x1b\x75\x46\xcb\xa6\x57\x46\x4b\xeb\xc3\x7a\x13\xab\x2b\xc3\x10\xac\x61\x29\x21\xe0\xea\x12\x53\x12\x70\x92\xa2\xc4\x2c\x60\xf7\xae\x75\x65\x60\x6a\xf4\xad\x45\x03\x5c\xa3\x05\xa5\x1d\xd8\xaa\xf4\x13\x06\x2e\x47\x68\x32\xa3\xc4\x02\x95\x8b\x5b\x3e\x49\x30\x77\xf4\x82\xb4\x66\x59\xc9\x56\x85\x14\xd6\x45\x99\xd1\x55\xd9\xd0\xb4\x5a\x65\xde\xd6\x64\x5e\xad\xc0\x50\x95\x21\x6c\x89\x5d\xd8\xb2\x70\x98\x42\x7c\xa9\x55\x66\x61\xbd\x0e\xf4\xe9\xa6\xb0\x7f\x0e\xd1\xab\xd5\x96\x58\xaf\x9f\x43\x47\xc2\x61\x41\x7c\x00\x00\x68\xc5\xa4\x60\x8b\x94\x58\xc4\xc5\x60\xb5\x82\x2d\x01\xeb\xf5\x76\x68\xea\x96\x0d\x0d\xa5\x6d\x72\x54\xbc\xc9\xd4\xe8\xa9\xe4\x71\xb3\xf4\xad\x48\xb8\x58\xfe\xef\x9e\x88\x22\xfb\x51\x47\x7c\xbd\xfd\x10\x9d\xea\x25\x1a\xb8\xe7\x2c\x8a\x2c\x32\xba\x52\xdc\x1f\x04\xd1\x5d\x44\x2b\xa7\x81\x47\x53\xa9\xd9\x82\x00\x95\xce\xe7\xf0\x21\xd4\x38\xf2\x9c\x4c\x43\xb3\x59\x4f\x92\x6e\xa0\xc3\x76\xb3\xcc\x88\xd2\x79\xa7\x24\x81\x73\x6a\x2d\x50\x63\x68\x0d\x7a\x06\x36\x94\x54\x6a\xea\xd3\x4e\x6b\x78\xa3\x83\xd7\x92\x1a\x28\x25\xad\x7d\x21\x21\x85\x6f\xa4\x40\x2e\x68\x62\x69\x51\x4a\x1c\xc5\x45\xf9\x82\xec\xc2\x23\xe3\x38\x18\x6f\xfa\x3d\x78\x1a\x7b\x73\xd4\x1a\xb5\x15\x7e\xe6\x21\x85\x61\x6b\x6b\x9b\x0e\x29\x70\xcd\xaa\x30\x44\x19\xba\xbf\x37\xf3\x64\x4f\xea\x53\x5f\x9d\x7f\xd1\x02\x07\xcf\xba\xba\xdd\x82\xd0\x8a\xff\x38\xfe\xa4\x7e\xcb\x07\xdd\xfc\x07\xff\x6e\xae\xe2\x73\xea\xf2\x66\x9a\x3a\xba\x71\x59\xd9\xdc\x0f\x46\xec\xe7\xc2\xbb\x33\xad\xac\x96\x18\x4b\x9d\x0d\xc8\x79\x65\xf3\x0e\xa5\x1d\x90\xc7\x2e\x97\xe8\x5e\x31\x27\x96\xd8\xf8\xcd\x2a\x15\xb6\x39\xd8\xd6\x3e\x10\xfc\x6e\x1b\x56\x4d\xc3\x60\xa6\x0d\x0c\xbc\x04\x11\x8a\x02\x02\x26\x5d\x49\x62\x89\x2a\x73\xf9\x11\x88\x9d\x9d\x10\xd1\xeb\x5e\x7d\x13\x37\x71\x18\x9b\x0f\xde\xcf\x60\xa1\x97\x38\xf8\x9d\x86\x04\xbf\x87\xc4\xfe\xb7\xde\xfc\xff\xac\x30\x9e\xc9\x03\x18\xca\xf9\x63\x8c\x75\x33\x30\x57\x1f\xcf\x3e\x1e\xc2\x2b\xce\xc1\x2e\x44\xd9\x1d\x22\xfd\x9e\xaf\x7b\x6c\x0d\x83\xb4\x2b\xe0\xb7\x61\xe8\xb6\x7f\xe1\x4d\x83\x80\x73\xaf\xbd\x9d\x80\x60\x4e\x12\xf8\x27\x5d\x20\x84\xf6\x73\x61\x7d\x00\xb0\xca\x18\x54\x2e\x28\xdd\x00\x69\x85\x61\x53\xa4\x5d\x35\x07\xf7\x05\x6c\x11\x77\x76\x5a\xd5\x49\xd2\x75\xd3\xe6\x62\xe6\x06\xdb\xf7\x6f\x36\x5a\xde\x23\x7a\x1d\x65\x1d\xea\x6f\xd0\x07\x08\x95\xfd\x6d\xe3\xf7\x03\x59\x6d\x9a\x9b\xa3\x07\x3e\x7e\xd7\xdc\xa3\x3f\xd6\xec\x7f\x3f\xd1\xbd\x7e\x34\x18\x06\x1b\x98\x8d\x22\xa9\x19\xf5\xf6\xb8\xb5\x1f\xf9\x5d\x1e\x5a\xf1\x60\x96\x70\x31\x10\xfc\x79\x11\x20\x05\xc1\x8f\xfe\x20\x15\xfe\x60\x49\xba\x93\x25\x5c\x64\x4e\xda\xef\x31\x30\x6d\x10\xde\xd1\x25\xbd\x0c\x0e\x1b\xa8\xf4\x97\x7f\x9b\x6b\x8f\x07\x3f\x97\x94\x21\x07\xda\x7c\x76\xfc\xee\xd3\xb3\xb0\x6c\xc7\x1b\xac\x0e\xcf\x25\xcd\xb0\x39\xd2\x60\x46\xad\x43\xb3\x01\xb1\x0f\xa8\x84\x8f\x5e\x7b\xf5\x60\x9a\x63\x3c\xff\x5e\xa1\xa9\xc3\x95\xa3\x59\x46\xe3\x78\x1c\xef\x85\x9b\xc5\xdc\x92\x26\x4c\x28\x87\x99\x11\xae\x4e\x89\xcd\xe9\x78\xff\x65\x74\x32\xcd\xb9\x5c\x7e\x9a\x25\x77\x57\xd7\x7f\xcd\xe6\x74\x78\xf6\xfd\xc5\x3f\xc4\xed\xa7\xd7\x07\x1f\xe8\xe9\xc5\xd5\x97\xbb\xaf\xef\x2f\x2a\x87\xf2\x6a\x6f\x2f\xdd\x80\x30\xa3\xad\xd5\x46\x64\x42\xa5\x84\x2a\xad\xea\x42\x57\x96\x1c\x77\xd5\xec\x75\x64\x9f\xf0\xe4\x6a\x6e\x63\x26\x75\xc5\x67\x92\x1a\x0c\x64\xe9\x9c\xde\x25\x52\x4c\x6d\xe2\xd0\xe5\x68\x92\x51\x3c\x8e\x87\xc9\xbc\x7d\x6e\x05\x3c\xe1\xfe\xe2\x60\x2f\x3a\x97\xd3\x22\x3b\x78\x77\x3d\x3e\x78\xff\x1a\xe5\xf2\xdd\xbf\xa9\x18\x8e\xe4\xc1\xe7\xfa\xeb\x7f\xcc\xf5\xe7\x37\x07\xe3\xfd\x62\x87\x7d\x1d\xe2\xd9\xd9\xe5\x68\xf6\x17\x9e\xcc\xed\x4b\xb1\x58\xd6\xa3\x9d\x2f\x3b\x59\x75\xfe\xf6\x84\xfc\xff\x52\x7e\xf5\xb6\x37\x7f\x7a\xd9\x9b\x3f\xcc\xb2\xb9\xe3\x35\x17\xbb\x49\xd2\x5c\xb3\xff\x1b\x00\x00\xff\xff\xaf\x82\x1c\x37\x6e\x0b\x00\x00")

func templatesPlaylistHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesPlaylistHtml,
		"templates/playlist.html",
	)
}

func templatesPlaylistHtml() (*asset, error) {
	bytes, err := templatesPlaylistHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/playlist.html", size: 2926, mode: os.FileMode(420), modTime: time.Unix(1474382670, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.html": templatesIndexHtml,
	"templates/playlist.html": templatesPlaylistHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{}},
		"playlist.html": &bintree{templatesPlaylistHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

