// Code generated by go-bindata.
// sources:
// templates/index.html
// templates/playlist.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x54\xdd\x6e\xe3\x36\x13\xbd\x96\x9e\x62\x3e\x02\x1f\x7a\x91\xa5\x68\x7b\x9d\xad\xbb\x90\x0c\x34\x09\xb6\x6d\xb6\x40\xb3\x49\xd0\xdd\xe4\x6e\x4c\x8e\x25\x3a\x14\xa9\x90\x94\x7f\x6a\xf8\xdd\x0b\x49\x71\xd2\x6c\xd1\x16\xab\xab\x99\xd1\xf0\xf0\x9c\xc3\x21\xf3\x2a\xd6\x66\x9e\x02\x00\xe4\x15\xa1\x9a\xa7\x49\xfe\x3f\xce\xe1\x9a\x1e\x5b\xed\x49\x41\x4d\x11\x21\x62\x19\x00\xcd\x06\x77\x01\xa4\xab\x09\x96\xda\x87\x08\x9c\x77\xed\x7d\x87\xac\xd0\x07\x8a\x05\x6b\xe3\x92\xcf\xd8\x73\xdd\x62\x4d\x05\x5b\x6b\xda\x34\xce\x47\x06\xd2\xd9\x48\x36\x16\x6c\xa3\x55\xac\x0a\x45\x6b\x2d\x89\xf7\xc9\x1b\xd0\x56\x47\x8d\x86\x07\x89\x86\x8a\xf1\x1b\x08\x95\xd7\xf6\x81\x47\xc7\x97\x3a\x16\xd6\xbd\xe0\x56\x31\x36\xbc\xe3\xb8\x2e\xd8\x96\xb7\xc8\xa5\xab\x1b\x8c\x7a\x61\xe8\x2f\x9b\x68\x2a\x48\x95\xd4\x2d\x4b\x93\x3c\xea\x68\x68\xbe\xdf\x43\xf6\xdb\xc6\x92\x87\xc3\xe1\xbb\x00\xe7\xce\x18\x92\x51\x3b\x9b\x8b\xa1\x21\x4d\x93\xdc\x68\xfb\x00\x95\xa7\x65\xc1\xba\x9d\xc2\x7b\x21\x6a\xdc\x4a\x65\xb3\x85\x73\x31\x44\x8f\x4d\x97\x48\x57\x8b\xe7\x82\x98\x66\xa3\x6c\xc4\xd1\x34\x15\x66\x13\x21\x43\x78\xf9\x97\xd5\xda\x66\x32\x04\x06\x9e\x4c\xc1\x42\xdc\x19\x0a\x15\x51\x64\xf3\x64\x30\x5f\x0c\xee\xf7\xf1\xc2\xa9\x5d\xa7\x54\xe9\x35\x48\x83\x21\x14\xac\x93\x84\xda\x92\x67\x30\x4f\x93\xe1\xb8\xc6\xd0\xe3\x14\xac\x46\x5f\x6a\xcb\xa3\x6b\xde\x9f\xfe\x9f\xfd\x9b\xc2\x6a\x7c\x5c\xdd\x9a\x23\xb4\xd1\x21\xf2\xd2\xbb\xb6\xe9\x7c\x4a\xf6\x7b\xf0\x68\x4b\x82\xec\x47\xb3\x68\xeb\x00\x87\x43\x9a\x24\x39\xfe\xbd\x9d\xeb\x48\x35\x1b\x6c\x12\x5d\x99\xac\xd8\xef\xb3\xdb\xce\xc5\xc3\xa1\xa7\xd1\xc7\x70\x38\xe4\x02\x9f\xb0\xc9\xaa\x1e\x71\x10\xdd\x9a\x23\x1f\xfc\xca\xee\x52\xc7\xaa\x5d\xf4\x0e\x37\xce\xec\x9a\x9a\xbc\x58\xa0\xb7\x28\x0d\xb1\xf9\x8d\x6b\xbd\x24\x38\x77\x8a\x06\xe8\x5c\x28\xbd\x7e\xb2\x4f\x0c\xfe\xf5\x71\x37\xcb\x67\xc7\x53\x00\xe9\x3c\xc1\x25\xae\xf1\x46\x7a\xdd\xc4\x34\x81\xe2\x9b\xbf\x7e\xea\x9f\xb1\xaf\x0c\x4a\x52\x80\x11\x62\x45\xbd\x38\xb7\xec\x43\xe5\x64\x5b\x93\x8d\x10\x5c\x9f\x37\x58\x52\x00\xe3\x50\xc1\x12\x43\x24\xff\x82\x13\x9e\xc8\x04\x2f\x5f\xf4\x4b\xa7\x28\x5b\x3d\xb6\xe4\x77\xbd\x09\x43\xc8\x27\xd9\x24\x9b\xf6\xd3\xb4\x0a\x2c\x4d\xb4\x8d\x54\x7a\x1d\x77\x05\x0b\x15\x4e\x4e\xdf\xf1\xb3\x45\xa5\xcc\xfa\xd3\x52\x6c\x6f\xef\x7e\x28\x57\x38\xba\x78\x7c\xfb\xb3\xde\x7c\xfa\x30\xfb\x15\xcf\xaf\x6f\xbf\x6c\xef\x3f\x5e\xb7\x91\xcc\xed\x74\x5a\xb0\x34\x91\xde\x85\xe0\xbc\x2e\xb5\x2d\x18\x5a\x67\x77\xb5\x6b\x03\x9b\xe7\x62\x60\xf5\x8a\x22\xbc\x66\xa8\xec\x2a\x64\xd2\xb8\x56\x2d\x0d\x7a\xea\x69\xe2\x0a\xb7\xc2\xe8\x45\x10\x91\x62\x45\x5e\x8c\xb3\x49\x36\x12\xab\x63\x7e\xa4\x0e\xaf\x99\xbf\x9d\x4d\xf9\x95\x59\xd4\xe5\xec\xf2\x6e\x32\xfb\xf8\x81\xcc\xfa\xf2\x77\xd4\xa3\xb1\x99\x7d\xde\xdd\xff\xe1\xef\x3e\xff\x34\x9b\x9c\xd6\x27\xf2\x7e\x44\x17\x17\x37\xe3\xe5\xf7\x4a\xac\xc2\x3b\xfd\xb0\xde\x8d\x4f\xbe\x9c\x94\xed\xd5\x2f\x67\x0c\xfe\x53\x4c\xf2\xcf\x6a\xbe\xf5\x7a\xaf\xbe\xbe\xdd\xab\x57\xae\xa5\xb9\x18\x5e\xd6\x3f\x03\x00\x00\xff\xff\xf9\xd5\xdc\x40\x61\x05\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 1377, mode: os.FileMode(420), modTime: time.Unix(1474034762, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPlaylistHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\xdd\x72\xdb\xb6\x12\xbe\x96\x9e\x62\x0f\x8e\xcf\x44\x1e\x9b\xa4\xa4\xd8\x39\xae\x2d\xaa\x13\xdb\x4d\x9a\x9f\x36\x8e\xe3\x69\xe2\x64\x7c\x01\x11\x2b\x12\x12\x08\x30\x00\x28\x9b\xd5\xe8\xdd\x3b\x00\x45\x4a\x51\x92\xe9\xa4\x17\xd5\x8d\x96\xcb\xfd\xf9\xbe\xdd\x05\xb8\xa3\xcc\xe6\x62\xdc\x05\x00\x18\x65\x48\xd9\xb8\xdb\x19\xfd\x27\x08\xe0\x1a\x3f\x97\x5c\x23\x83\x1c\x2d\x05\x4b\x53\x03\x54\xdc\xd3\xca\x40\xa2\x72\x84\x29\xd7\xc6\x42\x10\x38\x73\x6f\x91\x64\x54\x1b\xb4\x31\x29\xed\x34\x38\x21\xad\x5e\xd2\x1c\x63\xb2\xe0\x78\x5f\x28\x6d\x09\x24\x4a\x5a\x94\x36\x26\xf7\x9c\xd9\x2c\x66\xb8\xe0\x09\x06\xfe\xe1\x10\xb8\xe4\x96\x53\x11\x98\x84\x0a\x8c\x07\x87\x60\x32\xcd\xe5\x3c\xb0\x2a\x98\x72\x1b\x4b\xb5\x89\x9b\x59\x5b\x04\x0e\xe3\x22\x26\x0f\x41\x49\x83\x44\xe5\x05\xb5\x7c\x22\x70\x2b\x09\xc7\x18\x59\x8a\xce\xad\xdb\x19\x59\x6e\x05\x8e\x97\x4b\x08\x6f\x9c\x04\xab\xd5\x28\xaa\x75\xdd\x6e\x67\x24\xb8\x9c\x43\xa6\x71\x1a\x13\x17\xdc\x9c\x46\x51\x4e\x1f\x12\x26\xc3\x89\x52\xd6\x58\x4d\x0b\xf7\x90\xa8\x3c\x6a\x15\xd1\x51\xd8\x0f\xfb\x01\x15\x45\x46\xc3\x61\x94\x18\xb3\x79\x17\xe6\x5c\x86\x89\x31\x04\x34\x8a\x98\x18\x5b\x09\x34\x19\xa2\x25\xe3\x4e\x5d\xef\xa8\x2e\xb8\x97\x27\x8a\x55\x8e\x1c\xe3\x0b\x48\x04\x35\x26\x26\x8e\x05\xe5\x12\xb5\x83\x5f\x37\x68\x00\x3e\x4c\x4c\x72\xaa\x53\x2e\x03\xab\x8a\xd3\xe3\xff\x91\x1d\x4e\xd9\xa0\x71\xa0\x4d\xac\x89\x95\x30\xb1\x32\x28\x34\xcf\xa9\xae\xc8\x9a\x68\x44\xc6\xd7\x68\x4b\x2d\xc1\x2a\xb8\x50\x42\x60\x62\xb9\x92\xa3\x88\xb6\x29\x75\x23\x6d\x21\xd3\xea\x9e\xc0\xb8\xdb\xd9\x81\x2b\x82\x9c\x05\xc7\x0e\x6d\xed\x31\x29\xad\x55\x72\x17\x02\xc3\x29\x2d\x85\x25\x60\xab\x02\x63\x52\x1b\x11\x50\x32\x11\x3c\x99\xc7\x44\xa3\x50\x94\xf5\xf6\x1d\x34\x27\x8d\xa2\xda\xa4\x0d\x4b\x4b\xc6\x15\x70\x56\x57\x48\x2b\x51\x37\x5c\x2b\x61\x9c\x4d\x67\x64\x54\xa9\x13\x04\xa3\x93\x98\x34\x69\xbc\x53\x94\x17\x98\x7a\x7c\x9d\x5b\x55\x6a\x98\x68\x75\x6f\x50\x03\x53\x68\x40\x2a\x0b\xa6\x2c\xdc\x98\x82\xcd\x10\xea\x34\x28\x30\x47\x69\xc3\x26\x79\xe4\xd5\x2d\x16\x5f\x9e\x5a\x2c\x45\xc3\x54\x70\x63\x83\x54\xab\xb2\x20\x1e\xa6\x51\x32\x75\xba\x3a\xf3\x72\x09\x9a\xca\x14\x61\x8f\x1f\xc2\x9e\x81\xd3\x18\xc2\x77\x4a\xa6\x06\x56\x2b\x0f\x9f\xae\x9b\xf3\x5f\xef\xbd\x5c\xee\xf1\xd5\xea\xeb\xd0\x01\xb7\x98\x13\xe7\x00\xb0\x29\x9e\x41\x9c\xf7\x96\x4b\xd8\xe3\xb0\x5a\xed\xfb\xc1\xd8\x33\x7e\x28\x68\x93\x1c\x25\xab\x33\xd5\x7c\x4a\x31\xae\x45\xd7\xce\x88\xf1\xc5\xdf\xf7\x95\xe7\xa9\x2f\xae\x9b\xba\x0b\xb5\x40\x0d\x1b\x80\x3c\x4f\x03\xad\x4a\xc9\xdc\xd5\x11\x3c\x04\xb4\xb4\x0a\x58\x30\x11\x2a\x99\x13\xa0\xc2\xba\x80\xce\x85\x6a\x77\x10\x76\x33\xd7\x98\x6a\x79\x14\xb5\x27\xc0\x1f\x50\x93\x68\x5e\x58\x67\x14\x45\x70\x45\x8d\x01\xaa\x35\xad\x40\x4d\xc1\xf8\xfa\xb9\x69\x41\x06\x93\x0a\x9e\x2b\x6f\xb5\xa0\x1a\x0a\x41\x2b\x57\x35\x88\xe1\x13\xc9\x91\x71\x1a\x19\x9a\x17\x02\x07\x61\x5e\x3c\x26\x87\xf0\x85\x72\xe8\x95\x77\xdd\x0e\xec\xfa\xde\x9d\x35\x4a\x65\xb8\x3b\x24\x10\x43\xbf\xd1\x35\x1d\x86\x18\x98\x4a\x4a\x3f\x31\x29\xda\x5f\xea\xe1\x31\xe7\xd5\x85\xab\xce\xef\x34\xc7\xde\x57\x2d\xdc\x6f\x82\xd0\x92\x7d\xdb\xff\xbc\x7a\xc1\x7a\xed\xb0\x7b\xfb\x76\x88\xc2\x2b\x6a\xb3\x7a\x74\x5a\xb8\x61\x51\x9a\xcc\x4d\x41\xe8\x86\x60\x6d\xde\xb4\x1d\xba\x1d\x98\x96\xd2\x9f\x73\x30\x68\x9f\x26\x96\x2f\xb0\xc7\xd9\xc3\x3e\x2c\xeb\x06\xc0\x54\x69\xe8\x39\x48\xdc\x93\x04\x0e\xa3\x96\x62\x28\x50\xa6\x36\x3b\x03\x7e\x70\xe0\x3d\x3a\xed\xab\x4f\xfc\x2e\xf4\x63\xf0\xda\xd9\x69\xcc\xd5\x02\x7b\x8f\xa8\x4f\xf0\xc8\xe3\x70\xbf\xd5\xfa\xff\x7b\x44\x1d\x92\xad\x30\x94\xb1\x2f\x63\xac\xea\x01\xb8\x79\x73\xf9\xe6\x14\x9e\x32\x06\x66\xce\x8b\xf6\x06\xe8\x76\x5c\x1d\x43\xa3\x13\x88\xdb\x82\x7c\xea\xfb\xee\xb9\x17\x4e\xd5\xf3\x71\x36\xdc\x9b\x8e\x7a\x75\x14\xc1\x6f\x74\x8e\xe0\xdb\xc9\xb8\x71\x0e\x90\x94\x5a\xa3\xb4\x9e\xe9\x3a\x90\x92\xe8\x87\x3c\x6e\xab\xd9\xdb\x14\xb0\x89\x78\x70\xd0\xb0\x8e\xa2\xb6\x3b\x26\xe3\x53\xdb\xdb\xdf\xbc\x59\x73\x79\x85\xe8\x78\x14\x95\xaf\xbf\x46\xe7\xc0\x65\xfa\xf3\xda\xee\x1b\xb4\x9a\x34\x77\x67\x5b\x36\xf5\xed\xb9\xad\xd9\x70\x76\xbf\xef\xf0\x5e\x9d\x6d\x0f\x46\x73\x09\xaf\x19\x09\x95\x50\xa7\x0f\x1b\xfd\x99\x3b\xb5\xbe\x15\x5b\xb3\x84\xf3\x1e\x67\x5f\x17\x01\x62\xe0\xec\xec\x5f\x62\xe1\x2e\x8a\xa8\xbd\x29\xfc\x2a\x73\xde\x7c\x91\x21\x51\x1a\xe1\x25\x5d\xd0\x77\xde\x60\x1d\x2a\xfe\xe1\xdf\x7a\xf1\x71\xc1\xaf\x04\x4d\x90\x01\xad\xbf\x19\xee\x90\xa9\xa9\x17\x9b\xf1\x06\xa3\xfc\x73\x41\x53\xac\xaf\x28\x98\x52\x63\x51\xaf\x83\x98\x2d\x28\xfe\x8b\xd5\x2c\x1f\x89\x62\x18\xce\x3e\x97\xa8\x2b\xbf\x74\xd4\x62\x30\x0c\x87\xe1\x91\xdf\x2d\x66\x86\xd4\x6e\x5c\x5a\x4c\x35\xb7\x55\x4c\x4c\x46\x87\xc7\x4f\x82\xf3\x49\xc6\xc4\xe2\xed\x34\x7a\xb8\xb9\xfd\x29\x9d\xd1\xfe\xe5\xe7\xc7\xbf\xf2\xfb\xb7\xcf\x4e\x5e\xd3\x8b\xeb\x9b\x0f\x0f\x1f\x5f\x5d\x97\x16\xc5\xcd\xd1\x51\xbc\x0e\x92\x68\x65\x8c\xd2\x3c\xe5\x32\x26\x54\x2a\x59\xe5\xaa\x34\x64\xdc\x56\xb3\xd3\x82\xdd\xc1\xc9\xe4\xcc\x84\x89\x50\x25\x9b\x0a\xaa\xd1\x83\xa5\x33\xfa\x10\x09\x3e\x31\x91\x45\x9b\xa1\x8e\x06\xe1\x30\xec\x47\xb3\xe6\xb9\x21\xb0\x83\xfd\xf1\xc9\x51\x70\x25\x26\x79\x7a\xf2\xf2\x76\x78\xf2\xea\x19\x8a\xc5\xcb\x3f\x28\xef\x0f\xc4\xc9\xfb\xea\xe3\x9f\xfa\xf6\xfd\xf3\x93\xe1\x71\x7e\x90\x7c\xec\xe3\xe5\xe5\xbb\xc1\xf4\xff\x2c\x9a\x99\x27\x7c\xbe\xa8\x06\x07\x1f\x0e\xd2\xf2\xea\xc5\x39\xf9\xe7\x54\x7e\x74\xdf\x9b\xed\xae\x7b\xb3\xed\x2c\xeb\x25\xaf\xde\xec\x46\x51\xbd\x68\xff\x15\x00\x00\xff\xff\x88\x4c\xd3\x6b\x70\x0b\x00\x00")

func templatesPlaylistHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesPlaylistHtml,
		"templates/playlist.html",
	)
}

func templatesPlaylistHtml() (*asset, error) {
	bytes, err := templatesPlaylistHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/playlist.html", size: 2928, mode: os.FileMode(420), modTime: time.Unix(1474037812, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.html": templatesIndexHtml,
	"templates/playlist.html": templatesPlaylistHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{}},
		"playlist.html": &bintree{templatesPlaylistHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

