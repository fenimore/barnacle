// Code generated by go-bindata.
// sources:
// templates/index.html
// templates/playlist.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x55\xdf\x4f\x23\xb7\x13\x7f\x4e\xfe\x8a\xf9\xfa\xdb\xaa\x0f\x9c\x77\x93\x1c\xd0\x14\x65\x23\x15\xd0\x5d\xcb\x55\x2a\x07\xa8\x77\xf0\x36\xb1\x27\xbb\x0e\x5e\x7b\xb1\xbd\xf9\xd1\x28\xff\x7b\xb5\x5e\x92\x00\xbd\x72\x3d\xa9\x79\x1a\x8f\x3d\xf3\xf9\xe1\x78\x76\x54\x84\x52\x8f\xbb\x00\x00\xa3\x82\x50\x8e\xbb\x9d\xd1\xff\x38\x87\x2b\x7a\xa8\x95\x23\x09\x25\x05\x84\x80\xb9\x07\xd4\x0b\x5c\x79\x10\xb6\x24\x98\x2a\xe7\x03\x70\xde\x1c\x8f\x27\x44\x81\xce\x53\xc8\x58\x1d\xa6\x7c\xc8\x76\x79\x83\x25\x65\x6c\xae\x68\x51\x59\x17\x18\x08\x6b\x02\x99\x90\xb1\x85\x92\xa1\xc8\x24\xcd\x95\x20\x1e\x17\x6f\x40\x19\x15\x14\x6a\xee\x05\x6a\xca\xfa\x6f\xc0\x17\x4e\x99\x7b\x1e\x2c\x9f\xaa\x90\x19\xbb\xef\x5b\x84\x50\xf1\x86\xe3\x3c\x63\x4b\x5e\x23\x17\xb6\xac\x30\xa8\x89\xa6\x27\x20\x8a\x32\x92\x39\x35\x65\xdd\xce\x28\xa8\xa0\x69\xbc\x5e\x43\xf2\xfb\xc2\x90\x83\xcd\xe6\x07\x0f\x67\x56\x6b\x12\x41\x59\x33\x4a\xdb\x03\xdd\x6e\x67\xa4\x95\xb9\x87\xc2\xd1\x34\x63\x0d\x92\x3f\x49\xd3\x12\x97\x42\x9a\x64\x62\x6d\xf0\xc1\x61\xd5\x2c\x84\x2d\xd3\x5d\x22\x3d\x4c\x7a\x49\x8f\xa3\xae\x0a\x4c\x06\xa9\xf0\x7e\xbf\x97\x94\xca\x24\xc2\x7b\x06\x8e\x74\xc6\x7c\x58\x69\xf2\x05\x51\x60\xe3\x4e\x6b\x7e\xda\xba\x1f\xe3\x89\x95\xab\x46\xa9\x54\x73\x10\x1a\xbd\xcf\x58\x23\x09\x95\x21\xc7\x60\xdc\xed\xb4\xd7\xd5\x87\xd8\x27\x63\x25\xba\x5c\x19\x1e\x6c\x75\x72\xf4\x3d\x7b\x4d\x61\xd1\xdf\x55\xbb\x6d\xf4\x04\xc5\xd9\x45\xe3\xd5\x0b\x64\xcd\x7d\xc9\x8f\xe3\x46\x2c\xa8\xf5\x76\x4f\x2b\x1f\x78\xee\x6c\x5d\xc5\xdd\xce\x7a\x0d\x0e\x4d\x4e\x90\xfc\xac\x27\x75\xe9\x61\xb3\x69\xd2\x23\xfc\x7b\x01\x57\x81\x4a\xd6\x7a\x9c\x36\x69\x32\xe9\x7a\x9d\xdc\x34\x57\xb0\xd9\xc4\x6e\x11\xcc\x57\x68\xb6\xd5\x01\xf3\xe6\xaf\xc8\x25\x4d\xb1\xd6\x21\xc6\x95\xd2\x1a\xaa\x5a\x6b\xbe\xf4\xdc\xa9\xbc\x08\x2d\x95\x86\x4b\x72\x66\x6b\x13\x1e\x49\xb4\x2e\x37\xed\x76\xcd\x9b\x23\x11\x10\x36\x9b\x51\x8a\x5b\x09\x64\x64\x5b\xd3\x96\xd4\x3a\x5a\x92\x4a\x35\xff\x6f\xbc\x79\x4f\xc6\x91\x7f\x42\x6b\xbd\x86\xef\xf2\x26\x09\x27\xd9\x9e\xd1\xab\xce\x81\x54\x1e\x27\x9a\xe4\xa3\x85\xff\x7f\x55\xd4\x63\xfe\x4b\x77\x13\x59\xff\xeb\xfb\xd9\xf2\xdc\x6c\xd2\xa7\x38\x3b\x90\x2f\x12\x00\x80\x3d\x07\x32\xb2\x05\xfe\x9a\xd1\x6d\xee\x49\x8c\x2f\x1e\x64\xae\x42\x51\x4f\xe2\x1b\xac\xac\x5e\x55\x25\xb9\x74\x82\xce\xa0\xd0\xc4\xc6\xd7\xb6\x76\x82\xe0\xcc\x4a\x6a\x5d\x78\xec\xd5\xb6\x6d\x5f\x58\x8c\x9b\x69\x77\xba\x7d\xa7\x20\xac\x23\xb8\xc0\x39\x5e\x0b\xa7\xaa\xd0\xed\x40\xf6\xcd\xbf\x38\x17\x77\xbd\x2f\x35\x0a\x92\x80\x01\x42\x41\x51\xb2\x9d\xc6\x50\x5a\x51\x97\x64\x02\x78\x1b\xd7\x15\xe6\xe4\x41\x5b\x94\x30\x45\x1f\xc8\xed\xfb\xf8\x47\x32\xde\x89\xbd\x7e\x61\x25\x25\xb3\x87\x9a\xdc\x2a\x9a\xd0\x86\x7c\x90\x0c\x92\xc3\x38\x6f\x66\x9e\x75\x3b\xca\x04\xca\x9d\x0a\xab\x8c\xf9\x02\x07\x47\xc7\xfc\x74\x52\x48\x3d\xff\x38\x4d\x97\x37\xb7\x3f\xe5\x33\xec\x9d\x3f\xbc\xfd\x45\x2d\x3e\xbe\x1b\xfe\x86\x67\x57\x37\x9f\x97\x77\x1f\xae\xea\x40\xfa\xe6\xf0\x30\x63\xdd\x8e\x70\xd6\x7b\xeb\x54\xae\x4c\xc6\xd0\x58\xb3\x2a\x6d\xed\xd9\x78\x94\xb6\xac\x9e\x51\x84\xe7\x0c\xa5\x99\xf9\x44\x68\x5b\xcb\xa9\x46\x47\x91\x26\xce\x70\x99\x6a\x35\xf1\x69\xa0\x50\x90\x4b\xfb\xc9\x20\xe9\xa5\xb3\xed\x7a\x4b\x1d\x9e\x33\x7f\x3b\x3c\xe4\x97\x7a\x52\xe6\xc3\x8b\xdb\xc1\xf0\xc3\x3b\xd2\xf3\x8b\x3f\x50\xf5\xfa\x7a\xf8\x69\x75\xf7\xa7\xbb\xfd\xf4\x7e\x38\x38\x2a\x0f\xc4\x5d\x8f\xce\xcf\xaf\xfb\xd3\x1f\x65\x3a\xf3\xc7\xea\x7e\xbe\xea\x1f\x7c\x3e\xc8\xeb\xcb\x5f\x4f\x19\x7c\x55\x4c\xe7\x9f\xd5\x7c\xeb\x07\x60\xf6\x72\xfe\xcf\x9e\xb9\xd6\x1d\xa5\xed\xb7\xf7\xaf\x00\x00\x00\xff\xff\x9a\x83\xdc\xc7\x83\x07\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 1923, mode: os.FileMode(420), modTime: time.Unix(1474383102, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPlaylistHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\xdd\x72\xdb\x36\x13\xbd\x96\x9e\x62\x3f\x7c\xce\x44\x1e\x87\xa4\xe4\xd8\xa9\x6b\x8b\xee\xc4\x76\x93\xe6\xa7\x8d\x63\x7b\x9a\x38\x99\x5c\x40\xc4\x8a\x84\x04\x02\x0c\x00\xca\x62\x35\x7a\xf7\x0e\xc0\x1f\xcb\x8e\x33\x9d\xf4\xa2\xba\x11\xb8\xc4\x9e\x3d\xe7\xec\x0a\xc2\x38\xb3\xb9\x38\xee\x03\x00\x8c\x33\xa4\xec\xb8\xdf\x1b\xff\x2f\x08\xe0\x02\xbf\x96\x5c\x23\x83\x1c\x2d\x05\x4b\x53\x03\x54\xdc\xd0\xca\x40\xa2\x72\x84\x29\xd7\xc6\x42\x10\xb8\xed\x7e\x47\x92\x51\x6d\xd0\xc6\xa4\xb4\xd3\xe0\x80\x74\x71\x49\x73\x8c\xc9\x82\xe3\x4d\xa1\xb4\x25\x90\x28\x69\x51\xda\x98\xdc\x70\x66\xb3\x98\xe1\x82\x27\x18\xf8\x87\x27\xc0\x25\xb7\x9c\x8a\xc0\x24\x54\x60\x3c\x7a\x02\x26\xd3\x5c\xce\x03\xab\x82\x29\xb7\xb1\x54\xb7\xb8\x99\xb5\x45\xe0\x38\x2e\x62\xb2\x0c\x4a\x1a\x24\x2a\x2f\xa8\xe5\x13\x81\x1b\x45\x38\xc6\xc8\x52\x74\x69\xfd\xde\xd8\x72\x2b\xf0\x78\xb5\x82\xf0\xca\xad\x60\xbd\x1e\x47\x75\xac\xdf\xef\x8d\x05\x97\x73\xc8\x34\x4e\x63\xe2\xc0\xcd\x61\x14\xe5\x74\x99\x30\x19\x4e\x94\xb2\xc6\x6a\x5a\xb8\x87\x44\xe5\x51\x17\x88\xf6\xc2\x61\x38\x0c\xa8\x28\x32\x1a\xee\x46\x89\x31\xb7\xef\xc2\x9c\xcb\x30\x31\x86\x80\x46\x11\x13\x63\x2b\x81\x26\x43\xb4\xa4\xb1\x3b\xaa\xfd\xf6\xeb\x89\x62\x95\xd3\xc6\xf8\x02\x12\x41\x8d\x89\x89\x13\x41\xb9\x44\xed\xd8\xd7\xfd\x19\x81\x47\x89\x49\x4e\x75\xca\x65\x60\x55\x71\xb8\xff\x88\xdc\x93\x94\x8d\xda\x04\xda\x62\x4d\xac\x84\x89\x95\x41\xa1\x79\x4e\x75\x45\x1a\x9d\x11\x39\xbe\x40\x5b\x6a\x09\x56\xc1\xa9\x12\x02\x13\xcb\x95\x1c\x47\xb4\x2b\xa9\xdb\xd5\x06\x33\xad\x6e\x08\x1c\xf7\x7b\xf7\xe8\x8a\x20\x67\xc1\xbe\x63\xdb\x54\x2f\x19\x57\x2d\x63\xdf\xe1\xc3\xd1\x70\xf8\x88\x00\x67\xb5\x3a\xad\x44\xdd\x2b\xad\x84\x71\x69\xbd\xb1\x51\xa5\x4e\x10\x8c\x4e\x62\x42\xc0\x56\x05\xc6\xc4\xe3\x44\x79\x81\xa9\xc7\xee\x5d\xab\x52\xc3\x44\xab\x1b\x83\x1a\x98\x42\x03\x52\x59\x30\x65\xe1\x26\x0c\x6c\x86\x50\x57\x46\x81\x39\x4a\x1b\xb6\x7c\x22\x1f\xee\xe8\x79\x69\xf5\xb2\x14\xad\x0a\xc1\x8d\x0d\x52\xad\xca\xa2\xa6\x69\x94\x4c\x5d\xac\xae\xbc\x5a\x81\xa6\x32\x45\xd8\xe2\x4f\x60\xcb\xc0\x61\x0c\xe1\xa5\x92\xa9\x81\xf5\xda\xd3\xa7\x8d\xb1\xff\xaf\xb3\x57\xab\x2d\xbe\x5e\x93\x6f\xc1\x03\x6e\x31\x27\x2e\x05\x00\x94\x4c\x04\x4f\xe6\x31\x31\x88\xf3\xc1\x6a\x05\x5b\x1c\xd6\xeb\x6d\xdf\xd6\x2d\xe3\x5b\x4a\xdb\xf2\x28\x59\x5d\xab\x56\x54\x8a\xe3\x7a\xe9\x9a\x11\x31\xbe\xf8\xe7\xae\xf0\x3c\x7d\xa8\x27\xde\x71\x37\x47\xa7\x6a\x81\x1a\x36\x58\xf3\x3c\x0d\xb4\x2a\x25\x73\x87\x41\xb0\x0c\x68\x69\x15\xb0\x60\x22\x54\x32\x27\x40\x85\x75\x55\x5c\x0e\xd5\xb5\x4d\x2d\x91\x9a\x62\xbd\x6e\xbf\x3b\x07\xc3\x73\x6a\xb3\xda\x37\x57\xb5\x5d\x34\xfa\xfa\xbd\xb1\x49\x34\x2f\xac\x83\x89\x22\x38\xa7\xc6\x00\xd5\x9a\x56\xa0\xa6\x60\xbc\xe5\x42\x51\x47\x69\x52\xc1\x4b\xd5\xef\xc1\x82\x6a\x28\x04\xad\x9c\xc9\x10\xc3\xe7\x2f\x47\x6d\x50\x19\xee\xa6\x1a\x62\x18\xb6\xb1\xb6\xad\x10\x03\x53\x49\xe9\xc7\x24\x45\xfb\x6b\x3d\x31\xe6\xa4\x3a\x75\xda\xff\xa0\x39\x0e\xbe\xe9\xda\x76\x0b\x42\x4b\xf6\x70\xfe\x49\xf5\x8a\x0d\xba\x09\xf7\xfb\x1f\xd2\xdd\xd1\x0d\x8b\xd2\x64\x03\xd2\xf8\x50\x27\x24\x4a\x1a\x25\x30\x14\x2a\x1d\x90\xf3\xd2\x64\x1d\x4e\x3b\x02\x77\xb7\x5c\xa2\x7d\x9e\x58\xbe\xc0\x7a\xdf\xb4\x94\xfe\xa7\x0c\xa6\x8d\x0f\x38\x5b\x6e\xc3\xaa\x6e\x0b\x4c\x95\x86\x81\x13\xc1\xbd\x2d\xc0\x61\xdc\x99\x12\x0a\x94\xa9\xcd\x8e\x80\xef\xec\xf8\x8c\x5e\xf7\xea\x33\xff\x12\xfa\xb1\x78\xeb\xf6\x69\xcc\xd5\x02\x07\x8f\xa9\x2f\xf0\xd8\x17\x76\x9f\x75\xf3\xfd\x3d\x6b\x1c\x93\x0d\x18\xca\xd8\x5d\x8c\x75\xdd\xf4\xab\x77\x67\xef\x0e\xe1\x39\x63\x60\xe6\xbc\xe8\x0e\x8a\x7e\xcf\x39\x1f\x1a\x9d\x40\xdc\x59\xf8\x79\xe8\xfb\xed\x5e\xb8\xd0\xc0\xe3\xdc\x6a\x6f\x67\xc0\x87\xa3\x08\x7e\xa7\x73\x04\x3f\x00\x8c\x1b\x97\x00\x49\xa9\x35\x4a\xeb\x95\x36\x40\x4a\xa2\x1f\xfa\xb8\x73\x73\x70\x6b\x60\x8b\xb8\xb3\xd3\xaa\x8e\xa2\xae\x9f\x26\xe3\x53\x3b\xd8\xbe\x7d\xd3\x68\x79\x83\xe8\x74\x14\x95\xf7\x5f\xa3\x4b\xe0\x32\xfd\xa5\xd9\xf7\x80\xac\xb6\xcc\x97\xa3\x8d\x3d\x6e\xf2\x6f\xd1\xef\x6a\x76\x9f\xef\xe8\x5e\xdf\x19\x0c\x8d\x35\x4c\xa3\x48\xa8\x84\xba\x78\xd8\xc6\x8f\xdc\xa1\xe2\x5b\xb1\x31\x4b\x38\x1f\x70\xf6\xad\x09\x10\x03\x67\x47\xff\x91\x0a\x77\x38\x44\xdd\xe9\xe0\x2f\x2b\x27\xed\x7f\x2e\x24\x4a\x23\xbc\xa6\x0b\x7a\xe9\x37\x34\x50\xf1\x0f\x7f\x9a\xab\x8d\x03\x3f\x17\x34\x41\x06\xb4\xfe\x6b\x71\xbf\x3e\x35\xf5\xcb\x76\xbc\xc1\x28\xff\x5c\xd0\x14\xeb\x63\x09\xa6\xd4\x58\xd4\x0d\x88\xd9\xa0\xe2\x8f\xd9\xf6\x7a\x91\x28\x86\xe1\xec\x6b\x89\xba\xf2\xd7\x8a\x7a\x19\xec\x86\xbb\xe1\x9e\xbf\x3d\xcc\x0c\xa9\xd3\xb8\xb4\x98\x6a\x6e\xab\x98\x98\x8c\xee\xee\x3f\x0b\x4e\x26\x19\x13\x8b\xf7\xd3\x68\x79\x75\xfd\x73\x3a\xa3\xc3\xb3\xaf\x4f\x7f\xe3\x37\xef\x5f\x1c\xbc\xa5\xa7\x17\x57\x1f\x97\x9f\xde\x5c\x94\x16\xc5\xd5\xde\x5e\xdc\x80\x24\x5a\x19\xa3\x34\x4f\xb9\x8c\x09\x95\x4a\x56\xb9\x2a\x0d\x39\xee\xdc\xec\x75\x64\xef\xf1\x64\x72\x66\xc2\x44\xa8\x92\x4d\x05\xd5\xe8\xc9\xd2\x19\x5d\x46\x82\x4f\x4c\x64\xd1\x66\xa8\xa3\x51\xb8\x1b\x0e\xa3\x59\xfb\xdc\x0a\xb8\xc7\xfd\xe9\xc1\x5e\x70\x2e\x26\x79\x7a\xf0\xfa\x7a\xf7\xe0\xcd\x0b\x14\x8b\xd7\x7f\x52\x3e\x1c\x89\x83\x0f\xd5\xa7\xbf\xf4\xf5\x87\x97\x07\xbb\xfb\xf9\x4e\xf2\x69\x88\x67\x67\x97\xa3\xe9\x4f\x2c\x9a\x99\x67\x7c\xbe\xa8\x46\x3b\x1f\x77\xd2\xf2\xfc\xd5\x09\xf9\xf7\x52\x7e\xf4\x46\x37\xbb\x7f\xa1\x9b\x6d\x56\x69\xee\x71\xf5\xe5\x6d\x1c\xd5\x57\xe9\xbf\x03\x00\x00\xff\xff\x2d\x52\x68\xc9\x52\x0b\x00\x00")

func templatesPlaylistHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesPlaylistHtml,
		"templates/playlist.html",
	)
}

func templatesPlaylistHtml() (*asset, error) {
	bytes, err := templatesPlaylistHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/playlist.html", size: 2898, mode: os.FileMode(420), modTime: time.Unix(1474387922, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.html": templatesIndexHtml,
	"templates/playlist.html": templatesPlaylistHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{}},
		"playlist.html": &bintree{templatesPlaylistHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

