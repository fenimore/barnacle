// Code generated by go-bindata.
// sources:
// templates/index.html
// templates/playlist.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x56\xdb\x72\xdb\x36\x10\x7d\xa6\xbe\x62\x83\xb4\xd3\x87\x04\xa4\xa4\x38\xa9\x9a\x21\x35\xd3\x38\x93\xa4\x49\x2f\x8e\xed\x36\xb1\xdf\x20\x60\x49\x42\x06\x01\x1a\x00\x75\xa9\x46\xff\xde\x21\xa8\x9b\x95\xd6\xa9\xe3\x07\x0f\xb0\xbb\x38\x7b\xf6\x1c\x13\x70\x5a\xfa\x4a\x8d\x7b\x00\x00\x69\x89\x4c\x8c\x7b\x51\xfa\x88\x52\x38\xc7\xdb\x46\x5a\x14\x50\xa1\x67\xe0\x59\xe1\x80\xa9\x39\x5b\x3a\xe0\xa6\x42\xc8\xa5\x75\x1e\x28\x6d\xcb\x43\x05\x2f\x99\x75\xe8\x33\xd2\xf8\x9c\x8e\xc8\x2e\xae\x59\x85\x19\x99\x49\x9c\xd7\xc6\x7a\x02\xdc\x68\x8f\xda\x67\x64\x2e\x85\x2f\x33\x81\x33\xc9\x91\x86\xcd\x53\x90\x5a\x7a\xc9\x14\x75\x9c\x29\xcc\x06\x4f\xc1\x95\x56\xea\x1b\xea\x0d\xcd\xa5\xcf\xb4\xd9\xe3\x96\xde\xd7\xb4\xe5\x38\xcb\xc8\x82\x36\x8c\x72\x53\xd5\xcc\xcb\x89\xc2\x83\x26\x12\x33\x14\x05\xb6\xc7\x7a\x51\xea\xa5\x57\x38\x5e\xad\x20\xfe\x63\xae\xd1\xc2\x7a\xfd\x83\x83\x53\xa3\x14\x72\x2f\x8d\x4e\x93\xae\xa0\xd7\x8b\x52\x25\xf5\x0d\x94\x16\xf3\x8c\xb4\x9d\xdc\xcb\x24\xa9\xd8\x82\x0b\x1d\x4f\x8c\xf1\xce\x5b\x56\xb7\x1b\x6e\xaa\x64\x17\x48\x4e\xe2\x7e\xdc\xa7\x4c\xd5\x25\x8b\x87\x09\x77\x6e\x9f\x8b\x2b\xa9\x63\xee\x1c\x01\x8b\x2a\x23\xce\x2f\x15\xba\x12\xd1\x93\x71\xd4\x89\x9f\x74\xea\x87\xf5\xc4\x88\x65\x3b\xa9\x90\x33\xe0\x8a\x39\x97\x91\x76\x24\x26\x35\x5a\x02\xe3\x5e\xd4\xd9\x35\x80\x80\x93\x91\x8a\xd9\x42\x6a\xea\x4d\xfd\xf2\xf9\xf7\xe4\xbe\x09\xcb\xc1\xe6\xf4\x6a\x05\x32\x87\xf8\x77\xe3\xd1\xc1\x7a\xbd\x81\x3c\x68\xc8\x14\x5a\x0f\xe1\x37\x95\x3a\x37\x04\xac\x69\x7b\x85\x48\x2b\x68\x94\x3a\x6f\x8d\x2e\xc6\xef\x90\x09\x07\x7f\xd6\x8f\xd2\x64\x13\x69\xd1\x8f\xa1\x13\x21\x67\xfb\xde\xa8\xc5\x3e\x55\xda\xf1\x97\xfd\xad\x99\x77\x5d\xee\x88\xa0\xa8\xab\xe8\x8b\x90\x08\x07\x1a\xb5\xcd\x29\xe9\x3c\x2d\xac\x69\xea\x90\x8d\x52\xf6\x65\x86\x4a\x8f\x15\x08\xe9\xd8\x44\xa1\x20\x1b\x83\x1f\x07\x49\x3b\xc0\xdf\x1a\x27\x79\x9a\xb0\x10\x58\xad\xc0\x32\x5d\x20\xc4\x3f\xab\x49\x53\x75\xc3\xdc\x83\xbc\x01\x4c\xda\x30\xea\x64\xb5\x8a\x2f\xdb\x3f\xa8\xf5\x7a\x07\x9f\xba\x9a\xe9\xed\x69\xcf\x8a\xf6\xc3\xa2\x02\x73\xd6\x28\x1f\xd6\xb5\x54\x0a\xea\x46\x29\xba\x70\xd4\xca\xa2\xec\xa4\x0e\x5c\xe2\x53\xd3\x68\xbf\x21\xd1\x69\xda\xc2\xed\xc0\xdb\x92\xd0\x10\xd6\xeb\x83\x11\xb6\x52\x6f\x8e\x34\x2a\xa8\xba\xb1\xe3\x9b\xe5\xdd\x6b\xf3\x16\xb5\x45\x77\x40\x6b\xb5\x82\xef\x8a\x36\x08\x2f\xb3\x3d\xa3\x07\x79\xf2\xf8\xde\xa1\x36\xf1\x7f\xf3\x26\xb0\xfe\xdf\xfe\x6c\x79\xae\xd7\xc9\x61\x9f\x5d\x93\x63\x02\xc1\x89\x6f\xf7\x70\x0b\x77\xe8\x63\x74\x64\x62\x98\x11\x00\xf6\xe5\xa8\x45\x57\xfa\x35\x2f\x8f\x3f\xb3\x94\x1d\xdd\x60\x85\xf4\x65\x33\x09\x97\x56\x6d\xd4\xb2\xae\xd0\x26\x13\x66\x35\xe3\x0a\xc9\xf8\xc2\x34\x96\x23\x9c\x1a\x81\x9d\xd0\x1b\xac\x0e\xb6\xbb\x92\xc2\xba\x7d\x1e\x5e\x6d\x2f\x36\xe0\xc6\x22\xbc\x67\x33\x76\xc1\xad\xac\x7d\x2f\x82\xec\xc1\x3f\xe1\x21\xd9\x61\x9f\x29\xc6\x51\x00\xf3\xe0\x4b\x0c\x23\x9b\x3c\x2c\x85\xe1\x4d\x85\xda\x83\x33\x61\x5f\xb3\x02\x1d\x28\xc3\x04\xe4\xcc\x79\xb4\x7b\x1c\xb7\x21\xe3\x2c\xdf\xcf\xcf\x8d\xc0\x78\x7a\xdb\xa0\x5d\x06\x11\xba\x25\x1d\xc6\xc3\xf8\x24\x5c\xd0\x53\x47\x7a\x91\xd4\x1e\x0b\x2b\xfd\x32\x23\xae\x64\xc3\xe7\x2f\xe8\xab\x49\x29\xd4\xec\x63\x9e\x2c\x2e\xaf\x7e\x2a\xa6\xac\xff\xfa\xf6\xd9\x3b\x39\xff\xf8\x66\xf4\x2b\x3b\x3d\xbf\xfc\xbc\xb8\xfe\x70\xde\x78\x54\x97\x27\x27\x19\xe9\x45\xdc\x1a\xe7\x8c\x95\x85\xd4\x19\x61\xda\xe8\x65\x65\x1a\x47\xc6\x69\xd2\xb1\xba\x43\x11\xee\x32\x14\x7a\xea\x62\xae\x4c\x23\x72\xc5\x2c\x06\x9a\x6c\xca\x16\x89\x92\x13\x97\x78\xf4\x25\xda\x64\x10\x0f\xe3\x7e\x32\xdd\xee\xb7\xd4\xe1\x2e\xf3\x67\xa3\x13\x7a\xa6\x26\x55\x31\x7a\x7f\x35\x1c\x7d\x78\x83\x6a\xf6\xfe\x2f\x26\xfb\x03\x35\xfa\xb4\xbc\xfe\xdb\x5e\x7d\x7a\x3b\x1a\x3e\xaf\x9e\xf0\xeb\x3e\xbe\x7e\x7d\x31\xc8\x7f\x14\xc9\xd4\xbd\x90\x37\xb3\xe5\xe0\xc9\xe7\x27\x45\x73\xf6\xcb\x2b\x02\x5f\x1d\x26\xfa\xef\x69\x1e\xfa\x62\x4e\x8f\x1f\xcc\xe9\x1d\xd5\x7a\x69\xd2\xfd\xb3\xf2\x4f\x00\x00\x00\xff\xff\x90\xe1\x0b\x57\xb4\x08\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 2228, mode: os.FileMode(420), modTime: time.Unix(1474390183, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPlaylistHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\x4d\x73\xdb\x38\x12\x3d\x4b\xbf\xa2\x17\xeb\x54\xe4\x72\x48\x4a\x8e\x9d\xf5\xda\xa2\xb7\x62\x7b\x93\xc9\xc7\x4c\x1c\xdb\x35\x89\x93\xca\x01\x02\x5a\x24\x24\x10\x60\x00\x50\x36\x47\xa5\xff\x3e\x05\x50\xa4\x65\x27\xa9\xa9\xcc\x61\x74\x11\xd8\x44\xbf\x7e\xef\x75\x93\xc4\x38\x77\x85\x3c\xee\x03\x00\x8c\x73\xa4\xfc\xb8\xdf\x1b\xff\x2b\x8a\xe0\x02\xbf\x56\xc2\x20\x87\x02\x1d\x05\x47\x33\x0b\x54\xde\xd0\xda\x02\xd3\x05\xc2\x54\x18\xeb\x20\x8a\xfc\xf6\xb0\x83\xe5\xd4\x58\x74\x29\xa9\xdc\x34\x3a\x20\x5d\x5c\xd1\x02\x53\xb2\x10\x78\x53\x6a\xe3\x08\x30\xad\x1c\x2a\x97\x92\x1b\xc1\x5d\x9e\x72\x5c\x08\x86\x51\xb8\x78\x02\x42\x09\x27\xa8\x8c\x2c\xa3\x12\xd3\xd1\x13\xb0\xb9\x11\x6a\x1e\x39\x1d\x4d\x85\x4b\x95\xbe\xc3\xcd\x9d\x2b\x23\xcf\x71\x91\x92\xdb\xa8\xa2\x11\xd3\x45\x49\x9d\x98\x48\xdc\x28\x22\x30\x45\x9e\xa1\x4f\xeb\xf7\xc6\x4e\x38\x89\xc7\xcb\x25\xc4\x57\x7e\x05\xab\xd5\x38\x69\x62\xfd\x7e\x6f\x2c\x85\x9a\x43\x6e\x70\x9a\x12\x0f\x6e\x0f\x93\xa4\xa0\xb7\x8c\xab\x78\xa2\xb5\xb3\xce\xd0\xd2\x5f\x30\x5d\x24\x5d\x20\xd9\x8b\x87\xf1\x30\xa2\xb2\xcc\x69\xbc\x9b\x30\x6b\xef\xee\xc5\x85\x50\x31\xb3\x96\x80\x41\x99\x12\xeb\x6a\x89\x36\x47\x74\x64\x6d\x77\xd2\xf8\x1d\xd6\x13\xcd\x6b\xaf\x8d\x8b\x05\x30\x49\xad\x4d\x89\x17\x41\x85\x42\xe3\xd9\x37\xfd\x19\x41\x40\x49\x49\x41\x4d\x26\x54\xe4\x74\x79\xb8\xff\x88\x3c\x90\x94\x8f\xda\x04\xda\x62\x4d\x9c\x82\x89\x53\x51\x69\x44\x41\x4d\x4d\xd6\x3a\x13\x72\x7c\x81\xae\x32\x0a\x9c\x86\x53\x2d\x25\x32\x27\xb4\x1a\x27\xb4\x2b\x69\xda\xd5\x06\x33\xa3\x6f\x08\x1c\xf7\x7b\x0f\xe8\xca\xa8\xe0\xd1\xbe\x67\xbb\xae\x5e\x71\xa1\x5b\xc6\xa1\xc3\x87\xa3\xe1\xf0\x11\x01\xc1\x1b\x75\x46\xcb\xa6\x57\x46\x4b\xeb\xd3\x7a\x63\xab\x2b\xc3\x10\xac\x61\x29\x21\xe0\xea\x12\x53\x12\x70\x92\xa2\xc4\x2c\x60\xf7\xae\x75\x65\x60\x62\xf4\x8d\x45\x03\x5c\xa3\x05\xa5\x1d\xd8\xaa\xf4\x13\x06\x2e\x47\x68\x2a\xa3\xc4\x02\x95\x8b\x5b\x3e\x49\x08\x77\xf4\x82\xb4\x66\x59\xc9\x56\x85\x14\xd6\x45\x99\xd1\x55\xd9\xd0\xb4\x5a\x65\x3e\xd6\x54\x5e\x2e\xc1\x50\x95\x21\x6c\x89\x27\xb0\x65\xe1\x30\x85\xf8\x52\xab\xcc\xc2\x6a\x15\xe8\xd3\xb5\xb1\xff\x6e\xb2\x97\xcb\x2d\xb1\x5a\x91\x6f\xc1\x23\xe1\xb0\x20\x3e\x05\x00\xb4\x62\x52\xb0\x79\x4a\x2c\xe2\x7c\xb0\x5c\xc2\x96\x80\xd5\x6a\x3b\xb4\x75\xcb\x86\x96\xd2\xb6\x3c\x2a\xde\xd4\x6a\x14\x55\xf2\xb8\x59\xfa\x66\x24\x5c\x2c\xfe\xba\x2b\xa2\xc8\xbe\xd7\x93\xe0\xb8\x9f\xa3\x53\xbd\x40\x03\x1b\xac\x45\x91\x45\x46\x57\x8a\xfb\x97\x41\x74\x1b\xd1\xca\x69\xe0\xd1\x44\x6a\x36\x27\x40\xa5\xf3\x55\x7c\x0e\x35\x8d\x4d\x2d\x91\x86\x62\xb3\xee\xfe\x2d\x33\xa2\x74\xfe\x6e\x92\xc0\x39\xb5\x16\xa8\x31\xb4\x06\x3d\x05\x1b\x9c\x94\x9a\xfa\x4a\x93\x1a\x5e\xea\x7e\x0f\x16\xd4\x40\x29\x69\xed\xbd\x83\x14\x3e\x7f\x39\x6a\x83\xda\x0a\x3f\xac\x90\xc2\xb0\x8d\xb5\xdd\x82\x14\xb8\x66\x55\xe8\x7e\x86\xee\xff\xcd\x20\xd8\x93\xfa\xd4\x4b\xfa\x8d\x16\x38\xf8\xa6\x19\xdb\x2d\x08\xad\xf8\xf7\xf3\x4f\xea\x57\x7c\xd0\x0d\x6e\xd8\xdf\x0d\x44\x7c\x4e\x5d\xde\x8c\x41\x47\x37\x2e\x2b\x9b\x0f\x82\xa9\xde\xcf\x90\xc0\xb4\xb2\x5a\x62\x2c\x75\x36\x20\xe7\x95\xcd\x3b\x9c\xb6\xb3\xf7\xb7\x5c\xa2\x7b\xce\x9c\x58\x60\xb3\x6f\x5a\xa9\xf0\x84\x82\x6d\xe3\x03\xc1\x6f\xb7\x61\xd9\xb8\x0d\x53\x6d\x60\xe0\x45\x88\x60\x0b\x08\x18\x77\xa6\xc4\x12\x55\xe6\xf2\x23\x10\x3b\x3b\x21\xa3\xd7\xdd\xfa\x2c\xbe\xc4\xa1\xdb\x6f\xfd\x3e\x83\x85\x5e\xe0\xe0\x31\x0d\x05\x1e\x87\xc2\xfe\xb7\x5a\xff\xff\xc8\x1a\xcf\x64\x03\x86\x72\x7e\x1f\x63\xd5\x34\xfd\xea\xdd\xd9\xbb\x43\x78\xce\x39\xd8\xb9\x28\xbb\xe7\xbf\xdf\xf3\xce\xc7\xd6\x30\x48\x3b\x0b\x3f\x0f\x43\xbf\xfd\x0d\x1f\x1a\x04\x9c\x3b\xed\xed\x0c\x84\x70\x92\xc0\xaf\x74\x8e\x10\x06\x80\x0b\xeb\x13\x80\x55\xc6\xa0\x72\x41\xe9\x1a\x48\x2b\x0c\xb3\x9c\x76\x6e\x0e\xee\x0c\x6c\x11\x77\x76\x5a\xd5\x49\xd2\xf5\xd3\xe6\x62\xea\x06\xdb\x77\x77\xd6\x5a\xde\x20\x7a\x1d\x65\x1d\xfc\x37\xe8\x13\x84\xca\xfe\xb7\xde\xf7\x1d\x59\x6d\x99\x2f\x47\x1b\x7b\xfc\xe4\xdf\xa1\xdf\xd7\xec\x7f\x3f\xd0\xbd\xba\x37\x18\x06\x1b\x98\xb5\x22\xa9\x19\xf5\xf1\xb8\x8d\x1f\xf9\x77\x45\x68\xc5\xc6\x2c\xe1\x7c\x20\xf8\xb7\x26\x40\x0a\x82\x1f\xfd\x43\x2a\xfc\x27\x38\xe9\xde\x0e\xe1\x0c\x72\xd2\x7e\x4a\x81\x69\x83\xf0\x9a\x2e\xe8\x65\xd8\xb0\x86\x4a\x7f\xfa\xb7\x3e\xb1\x78\xf0\x73\x49\x19\x72\xa0\xcd\x17\xc3\x3f\x7d\x7a\x1a\x96\xed\x78\x83\xd5\xe1\xba\xa4\x19\x36\xaf\x25\x98\x52\xeb\xd0\xac\x41\xec\x06\x95\xf0\xf6\x6c\x4f\x0d\x4c\x73\x8c\x67\x5f\x2b\x34\x75\x38\x2d\x34\xcb\x68\x37\xde\x8d\xf7\xc2\xa1\x60\x66\x49\x93\x26\x94\xc3\xcc\x08\x57\xa7\xc4\xe6\x74\x77\xff\x59\x74\x32\xc9\xb9\x5c\xbc\x9f\x26\xb7\x57\xd7\xff\xcd\x66\x74\x78\xf6\xf5\xe9\x2f\xe2\xe6\xfd\x8b\x83\xb7\xf4\xf4\xe2\xea\xe3\xed\xa7\x37\x17\x95\x43\x79\xb5\xb7\x97\xae\x41\x98\xd1\xd6\x6a\x23\x32\xa1\x52\x42\x95\x56\x75\xa1\x2b\x4b\x8e\x3b\x37\x7b\x1d\xd9\x07\x3c\xb9\x9a\xd9\x98\x49\x5d\xf1\xa9\xa4\x06\x03\x59\x3a\xa3\xb7\x89\x14\x13\x9b\x38\x74\x39\x9a\x64\x14\xef\xc6\xc3\x64\xd6\x5e\xb7\x02\x1e\x70\x7f\x7a\xb0\x17\x9d\xcb\x49\x91\x1d\xbc\xbe\xde\x3d\x78\xf3\x02\xe5\xe2\xf5\xef\x54\x0c\x47\xf2\xe0\x43\xfd\xe9\x0f\x73\xfd\xe1\xe5\xc1\xee\x7e\xb1\xc3\x3e\x0d\xf1\xec\xec\x72\x34\xfd\x0f\x4f\x66\xf6\x99\x98\x2f\xea\xd1\xce\xc7\x9d\xac\x3a\x7f\x75\x42\xfe\xbe\x94\x9f\x3d\xa8\xcd\x1e\x9e\xd3\x66\x9b\x55\xd6\xc7\xb3\xe6\x4c\x36\x4e\x9a\x13\xf2\x9f\x01\x00\x00\xff\xff\x32\x83\x64\x20\x29\x0b\x00\x00")

func templatesPlaylistHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesPlaylistHtml,
		"templates/playlist.html",
	)
}

func templatesPlaylistHtml() (*asset, error) {
	bytes, err := templatesPlaylistHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/playlist.html", size: 2857, mode: os.FileMode(420), modTime: time.Unix(1474388938, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.html": templatesIndexHtml,
	"templates/playlist.html": templatesPlaylistHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{}},
		"playlist.html": &bintree{templatesPlaylistHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

