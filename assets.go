// Code generated by go-bindata.
// sources:
// templates/index.html
// templates/playlist.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x54\xdd\x6e\xe3\x36\x13\xbd\x96\x9e\x62\x3e\x02\x1f\x7a\x91\xa5\x68\x7b\x9d\xad\xbb\x90\x0c\x34\x09\xb6\x6d\xb6\x40\xb3\x49\xd0\xdd\xe4\x6e\x4c\x8e\x25\x3a\x14\xa9\x90\x94\x7f\x6a\xf8\xdd\x0b\x49\x71\xd2\x6c\xd1\x16\xab\xab\x99\xd1\xf0\xf0\x9c\xc3\x21\xf3\x2a\xd6\x66\x9e\x02\x00\xe4\x15\xa1\x9a\xa7\x49\xfe\x3f\xce\xe1\x9a\x1e\x5b\xed\x49\x41\x4d\x11\x21\x62\x19\x00\xcd\x06\x77\x01\xa4\xab\x09\x96\xda\x87\x08\x9c\x77\xed\x7d\x87\xac\xd0\x07\x8a\x05\x6b\xe3\x92\xcf\xd8\x73\xdd\x62\x4d\x05\x5b\x6b\xda\x34\xce\x47\x06\xd2\xd9\x48\x36\x16\x6c\xa3\x55\xac\x0a\x45\x6b\x2d\x89\xf7\xc9\x1b\xd0\x56\x47\x8d\x86\x07\x89\x86\x8a\xf1\x1b\x08\x95\xd7\xf6\x81\x47\xc7\x97\x3a\x16\xd6\xbd\xe0\x56\x31\x36\xbc\xe3\xb8\x2e\xd8\x96\xb7\xc8\xa5\xab\x1b\x8c\x7a\x61\xe8\x2f\x9b\x68\x2a\x48\x95\xd4\x2d\x4b\x93\x3c\xea\x68\x68\xbe\xdf\x43\xf6\xdb\xc6\x92\x87\xc3\xe1\xbb\x00\xe7\xce\x18\x92\x51\x3b\x9b\x8b\xa1\x21\x4d\x93\xdc\x68\xfb\x00\x95\xa7\x65\xc1\xba\x9d\xc2\x7b\x21\x6a\xdc\x4a\x65\xb3\x85\x73\x31\x44\x8f\x4d\x97\x48\x57\x8b\xe7\x82\x98\x66\xa3\x6c\xc4\xd1\x34\x15\x66\x13\x21\x43\x78\xf9\x97\xd5\xda\x66\x32\x04\x06\x9e\x4c\xc1\x42\xdc\x19\x0a\x15\x51\x64\xf3\x64\x30\x5f\x0c\xee\xf7\xf1\xc2\xa9\x5d\xa7\x54\xe9\x35\x48\x83\x21\x14\xac\x93\x84\xda\x92\x67\x30\x4f\x93\xe1\xb8\xc6\xd0\xe3\x14\xac\x46\x5f\x6a\xcb\xa3\x6b\xde\x9f\xfe\x9f\xfd\x9b\xc2\x6a\x7c\x5c\xdd\x9a\x23\xb4\xd1\x21\xf2\xd2\xbb\xb6\xe9\x7c\x4a\xf6\x7b\xf0\x68\x4b\x82\xec\x47\xb3\x68\xeb\x00\x87\x43\x9a\x24\x39\xfe\xbd\x9d\xeb\x48\x35\x1b\x6c\x12\x5d\x99\xac\xd8\xef\xb3\xdb\xce\xc5\xc3\xa1\xa7\xd1\xc7\x70\x38\xe4\x02\x9f\xb0\xc9\xaa\x1e\x71\x10\xdd\x9a\x23\x1f\xfc\xca\xee\x52\xc7\xaa\x5d\xf4\x0e\x37\xce\xec\x9a\x9a\xbc\x58\xa0\xb7\x28\x0d\xb1\xf9\x8d\x6b\xbd\x24\x38\x77\x8a\x06\xe8\x5c\x28\xbd\x7e\xb2\x4f\x0c\xfe\xf5\x71\x37\xcb\x67\xc7\x53\x00\xe9\x3c\xc1\x25\xae\xf1\x46\x7a\xdd\xc4\x34\x81\xe2\x9b\xbf\x7e\xea\x9f\xb1\xaf\x0c\x4a\x52\x80\x11\x62\x45\xbd\x38\xb7\xec\x43\xe5\x64\x5b\x93\x8d\x10\x5c\x9f\x37\x58\x52\x00\xe3\x50\xc1\x12\x43\x24\xff\x82\x13\x9e\xc8\x04\x2f\x5f\xf4\x4b\xa7\x28\x5b\x3d\xb6\xe4\x77\xbd\x09\x43\xc8\x27\xd9\x24\x9b\xf6\xd3\xb4\x0a\x2c\x4d\xb4\x8d\x54\x7a\x1d\x77\x05\x0b\x15\x4e\x4e\xdf\xf1\xb3\x45\xa5\xcc\xfa\xd3\x52\x6c\x6f\xef\x7e\x28\x57\x38\xba\x78\x7c\xfb\xb3\xde\x7c\xfa\x30\xfb\x15\xcf\xaf\x6f\xbf\x6c\xef\x3f\x5e\xb7\x91\xcc\xed\x74\x5a\xb0\x34\x91\xde\x85\xe0\xbc\x2e\xb5\x2d\x18\x5a\x67\x77\xb5\x6b\x03\x9b\xe7\x62\x60\xf5\x8a\x22\xbc\x66\xa8\xec\x2a\x64\xd2\xb8\x56\x2d\x0d\x7a\xea\x69\xe2\x0a\xb7\xc2\xe8\x45\x10\x91\x62\x45\x5e\x8c\xb3\x49\x36\x12\xab\x63\x7e\xa4\x0e\xaf\x99\xbf\x9d\x4d\xf9\x95\x59\xd4\xe5\xec\xf2\x6e\x32\xfb\xf8\x81\xcc\xfa\xf2\x77\xd4\xa3\xb1\x99\x7d\xde\xdd\xff\xe1\xef\x3e\xff\x34\x9b\x9c\xd6\x27\xf2\x7e\x44\x17\x17\x37\xe3\xe5\xf7\x4a\xac\xc2\x3b\xfd\xb0\xde\x8d\x4f\xbe\x9c\x94\xed\xd5\x2f\x67\x0c\xfe\x53\x4c\xf2\xcf\x6a\xbe\xf5\x7a\xaf\xbe\xbe\xdd\xab\x57\xae\xa5\xb9\x18\x5e\xd6\x3f\x03\x00\x00\xff\xff\xf9\xd5\xdc\x40\x61\x05\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 1377, mode: os.FileMode(420), modTime: time.Unix(1474034762, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPlaylistHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\x4d\x73\xdb\x38\x12\x3d\x4b\xbf\xa2\x17\xeb\x54\xe4\xb2\x49\x4a\x8a\x9d\xf5\xda\xa2\xb6\x62\x7b\x93\xc9\xc7\x4c\x1c\xc7\x35\x89\x93\xf2\x01\x22\x5a\x24\x24\x10\x60\x00\x50\x36\x47\xa5\xff\x3e\x05\x50\xa4\x14\x25\xa9\xa9\xcc\x61\x74\x11\xd8\xec\x8f\xf7\xba\x1f\x40\x8c\x32\x9b\x8b\x71\x17\x00\x60\x94\x21\x65\xe3\x6e\x67\xf4\xaf\x20\x80\x6b\xfc\x52\x72\x8d\x0c\x72\xb4\x14\x2c\x4d\x0d\x50\x71\x4f\x2b\x03\x89\xca\x11\xa6\x5c\x1b\x0b\x41\xe0\xdc\xbd\x47\x92\x51\x6d\xd0\xc6\xa4\xb4\xd3\xe0\x84\xb4\x76\x49\x73\x8c\xc9\x82\xe3\x7d\xa1\xb4\x25\x90\x28\x69\x51\xda\x98\xdc\x73\x66\xb3\x98\xe1\x82\x27\x18\xf8\x87\x43\xe0\x92\x5b\x4e\x45\x60\x12\x2a\x30\x1e\x1c\x82\xc9\x34\x97\xf3\xc0\xaa\x60\xca\x6d\x2c\xd5\x26\x6f\x66\x6d\x11\x38\x8c\x8b\x98\x3c\x04\x25\x0d\x12\x95\x17\xd4\xf2\x89\xc0\xad\x22\x1c\x63\x64\x29\xba\xb0\x6e\x67\x64\xb9\x15\x38\x5e\x2e\x21\xbc\x71\x2b\x58\xad\x46\x51\x6d\xeb\x76\x3b\x23\xc1\xe5\x1c\x32\x8d\xd3\x98\xb8\xe4\xe6\x34\x8a\x72\xfa\x90\x30\x19\x4e\x94\xb2\xc6\x6a\x5a\xb8\x87\x44\xe5\x51\x6b\x88\x8e\xc2\x7e\xd8\x0f\xa8\x28\x32\x1a\x0e\xa3\xc4\x98\xcd\xbb\x30\xe7\x32\x4c\x8c\x21\xa0\x51\xc4\xc4\xd8\x4a\xa0\xc9\x10\x2d\x19\x77\xea\x7e\x47\x75\xc3\xfd\x7a\xa2\x58\xe5\xc8\x31\xbe\x80\x44\x50\x63\x62\xe2\x58\x50\x2e\x51\x3b\xf8\xf5\x80\x06\xe0\xd3\xc4\x24\xa7\x3a\xe5\x32\xb0\xaa\x38\x3d\x7e\x44\x76\x38\x65\x83\x26\x80\x36\xb9\x26\x56\xc2\xc4\xca\xa0\xd0\x3c\xa7\xba\x22\x6b\xa2\x11\x19\x5f\xa3\x2d\xb5\x04\xab\xe0\x42\x09\x81\x89\xe5\x4a\x8e\x22\xda\x96\xd4\xcd\x6a\x0b\x99\x56\xf7\x04\xc6\xdd\xce\x0e\x5c\x11\xe4\x2c\x38\x76\x68\xeb\x88\x49\x69\xad\x92\xbb\x10\x18\x4e\x69\x29\x2c\x01\x5b\x15\x18\x93\xda\x89\x80\x92\x89\xe0\xc9\x3c\x26\x1a\x85\xa2\xac\xb7\xef\xa0\xb9\xd5\x28\xaa\x5d\xda\xb4\xb4\x64\x5c\x01\x67\x75\x87\xb4\x12\xf5\xc0\xb5\x12\xc6\xf9\x74\x46\x46\x95\x3a\x41\x30\x3a\x89\x49\x53\xc6\x07\x45\x79\x81\xa9\xc7\xd7\xb9\x55\xa5\x86\x89\x56\xf7\x06\x35\x30\x85\x06\xa4\xb2\x60\xca\xc2\xc9\x14\x6c\x86\x50\x97\x41\x81\x39\x4a\x1b\x36\xc5\x23\x6f\x6e\xb1\xf8\xf6\xd4\xcb\x52\x34\x4c\x05\x37\x36\x48\xb5\x2a\x0b\xe2\x61\x1a\x25\x53\x67\xab\x2b\x2f\x97\xa0\xa9\x4c\x11\xf6\xf8\x21\xec\x19\x38\x8d\x21\x7c\xaf\x64\x6a\x60\xb5\xf2\xf0\xe9\x7a\x38\xff\xf6\xd1\xcb\xe5\x1e\x5f\xad\xbe\x4d\x1d\x70\x8b\x39\x71\x01\x00\x9b\xe6\x19\xc4\x79\x6f\xb9\x84\x3d\x0e\xab\xd5\xbe\x17\xc6\x9e\xf1\xa2\xa0\x4d\x71\x94\xac\xae\x54\xf3\x29\xc5\xb8\x5e\xba\x71\x46\x8c\x2f\xfe\x7a\xae\x3c\x4f\x1b\x1d\xfa\x8d\x7b\x3a\xe8\xf7\x1f\x11\xdf\x6f\x27\xc4\x0b\xb5\x40\x0d\x1b\xcc\x3c\x4f\x03\xad\x4a\xc9\xdc\x69\x12\x3c\x04\xb4\xb4\x0a\x58\x30\x11\x2a\x99\x13\xa0\xc2\xba\x1a\x2e\x84\x6a\xb7\x37\x76\xc1\xd4\x30\xeb\xf5\x28\x6a\x37\x85\xdf\xb3\x26\xd1\xbc\xb0\xce\x29\x8a\xe0\x8a\x1a\x03\x54\x6b\x5a\x81\x9a\x82\xf1\x2d\x75\x02\x42\x06\x93\x0a\x5e\x28\xef\xb5\xa0\x1a\x0a\x41\x2b\xd7\x48\x88\xe1\x33\xc9\x91\x71\x1a\x19\x9a\x17\x02\x07\x61\x5e\x3c\x21\x87\xf0\x95\x71\xe8\x8d\x77\xdd\x0e\xec\xc6\xde\x9d\x35\x46\x65\xb8\xdb\x37\x10\x43\xbf\xb1\x35\x43\x87\x18\x98\x4a\x4a\x2f\xa2\x14\xed\xff\x6b\x3d\x99\xf3\xea\xc2\x75\xe7\x37\x9a\x63\xef\x9b\xa9\xee\x37\x49\x68\xc9\xbe\x1f\x7f\x5e\xbd\x64\xbd\x56\xff\xde\xbf\xd5\x55\x78\x45\x6d\x56\xab\xa9\x85\x1b\x16\xa5\xc9\x9c\x30\x42\xa7\x8b\xb5\x7b\xa3\x04\xe8\x76\x60\x5a\x4a\xbf\xf5\xc1\xa0\x7d\x96\x58\xbe\xc0\x1e\x67\x0f\xfb\xb0\xac\x07\x00\x53\xa5\xa1\xe7\x20\x71\x4f\x12\x38\x8c\x5a\x8a\xa1\x40\x99\xda\xec\x0c\xf8\xc1\x81\x8f\xe8\xb4\xaf\x3e\xf3\xbb\xd0\xcb\xe0\x8d\xf3\xd3\x98\xab\x05\xf6\x1e\x53\x5f\xe0\xb1\xc7\xe1\x7e\xab\xf5\xff\x8f\x88\x3a\x24\x5b\x69\x28\x63\x5f\xe7\x58\xd5\x02\xb8\x79\x7b\xf9\xf6\x14\x9e\x31\x06\x66\xce\x8b\xf6\x50\xe8\x76\x5c\x1f\x43\xa3\x13\x88\xdb\x86\x7c\xee\xfb\xe9\xb9\x17\xce\xd4\xf3\x79\x36\xdc\x9b\x89\x7a\x73\x14\xc1\xaf\x74\x8e\xe0\xc7\xc9\xb8\x71\x01\x90\x94\x5a\xa3\xb4\x9e\xe9\x3a\x91\x92\xe8\x45\x1e\xb7\xdd\xec\x6d\x1a\xd8\x64\x3c\x38\x68\x58\x47\x51\x3b\x1d\x93\xf1\xa9\xed\xed\x6f\xde\xac\xb9\xbc\x46\x74\x3c\x8a\xca\xf7\x5f\xa3\x0b\xe0\x32\xfd\xdf\xda\xef\x3b\xb4\x9a\x32\x77\x67\x5b\x3e\xf5\x81\xba\x6d\xd9\x70\x76\xbf\x1f\xf0\x5e\x9d\x6d\x0b\xa3\x39\x97\xd7\x8c\x84\x4a\xa8\xb3\x87\x8d\xfd\xcc\xed\x5a\x3f\x8a\x2d\x2d\xe1\xbc\xc7\xd9\xb7\x4d\x80\x18\x38\x3b\xfb\x87\x58\xb8\x83\x22\x6a\x4f\x0a\x7f\xbb\x39\x6f\x3e\xd2\x90\x28\x8d\xf0\x8a\x2e\xe8\x7b\xef\xb0\x4e\x15\xff\xf4\x6f\x7d\x17\x72\xc9\xaf\x04\x4d\x90\x01\xad\x3f\x23\x6e\x93\xa9\xa9\x5f\x36\xf2\x06\xa3\xfc\x73\x41\x53\xac\x8f\x28\x98\x52\x63\x51\xaf\x93\x98\x2d\x28\xfe\x23\xd6\xdc\x47\x12\xc5\x30\x9c\x7d\x29\x51\x57\xfe\x1e\x52\x2f\x83\x61\x38\x0c\x8f\xfc\x75\x63\x66\x48\x1d\xc6\xa5\xc5\x54\x73\x5b\xc5\xc4\x64\x74\x78\xfc\x34\x38\x9f\x64\x4c\x2c\xde\x4d\xa3\x87\x9b\xdb\xff\xa6\x33\xda\xbf\xfc\xf2\xe4\x17\x7e\xff\xee\xf9\xc9\x1b\x7a\x71\x7d\xf3\xf1\xe1\xd3\xeb\xeb\xd2\xa2\xb8\x39\x3a\x8a\xd7\x49\x12\xad\x8c\x51\x9a\xa7\x5c\xc6\x84\x4a\x25\xab\x5c\x95\x86\x8c\xdb\x6e\x76\x5a\xb0\x3b\x38\x99\x9c\x99\x30\x11\xaa\x64\x53\x41\x35\x7a\xb0\x74\x46\x1f\x22\xc1\x27\x26\xb2\x68\x33\xd4\xd1\x20\x1c\x86\xfd\x68\xd6\x3c\x37\x04\x76\xb0\x3f\x39\x39\x0a\xae\xc4\x24\x4f\x4f\x5e\xdd\x0e\x4f\x5e\x3f\x47\xb1\x78\xf5\x3b\xe5\xfd\x81\x38\xf9\x50\x7d\xfa\x43\xdf\x7e\x78\x71\x32\x3c\xce\x0f\x92\x4f\x7d\xbc\xbc\x7c\x3f\x98\xfe\x87\x45\x33\xf3\x94\xcf\x17\xd5\xe0\xe0\xe3\x41\x5a\x5e\xbd\x3c\x27\x7f\x9f\xca\xcf\x5e\x01\x67\xbb\x37\xc0\xd9\x76\x95\xf5\xbd\xaf\xbe\xec\x8d\xa2\xfa\xee\xfd\x67\x00\x00\x00\xff\xff\x2c\x47\xf9\xc4\x83\x0b\x00\x00")

func templatesPlaylistHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesPlaylistHtml,
		"templates/playlist.html",
	)
}

func templatesPlaylistHtml() (*asset, error) {
	bytes, err := templatesPlaylistHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/playlist.html", size: 2947, mode: os.FileMode(420), modTime: time.Unix(1474039433, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.html": templatesIndexHtml,
	"templates/playlist.html": templatesPlaylistHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{}},
		"playlist.html": &bintree{templatesPlaylistHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

