// Code generated by go-bindata.
// sources:
// templates/index.html
// templates/playlist.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x56\xdd\x72\xdb\x36\x13\xbd\xa6\x9e\x62\x3f\xe4\xeb\xf4\xc2\x01\x29\x29\xb6\xab\x7a\x48\xcd\xd4\xf6\x24\xad\xd3\x4e\x1d\xdb\xd3\xc4\xbe\x83\x80\x15\x09\x19\x04\x68\x00\xd4\x4f\x35\x7a\xf7\x0e\x41\xfd\x59\x6d\x9d\xba\xf5\xd5\x62\x81\x3d\x7b\xce\x1e\xcf\x52\x69\xe1\x4b\x35\xec\x00\x00\xa4\x05\x32\x31\xec\x44\xe9\xff\x28\x85\x1b\x7c\xaa\xa5\x45\x01\x25\x7a\x06\x9e\xe5\x0e\x98\x9a\xb1\x85\x03\x6e\x4a\x84\xb1\xb4\xce\x03\xa5\xcd\xf3\xf0\x82\x17\xcc\x3a\xf4\x19\xa9\xfd\x98\x0e\xc8\x36\xaf\x59\x89\x19\x99\x4a\x9c\x55\xc6\x7a\x02\xdc\x68\x8f\xda\x67\x64\x26\x85\x2f\x32\x81\x53\xc9\x91\x86\xc3\x5b\x90\x5a\x7a\xc9\x14\x75\x9c\x29\xcc\x7a\x6f\xc1\x15\x56\xea\x47\xea\x0d\x1d\x4b\x9f\x69\xb3\xc3\x2d\xbc\xaf\x68\xc3\x71\x9a\x91\x39\xad\x19\xe5\xa6\xac\x98\x97\x23\x85\x7b\x4d\x24\x66\x28\x72\x6c\xca\x3a\x51\xea\xa5\x57\x38\x5c\x2e\x21\xfe\x75\xa6\xd1\xc2\x6a\xf5\xad\x83\x0b\xa3\x14\x72\x2f\x8d\x4e\x93\xf6\x41\xa7\x13\xa5\x4a\xea\x47\x28\x2c\x8e\x33\xd2\x74\x72\x67\x49\x52\xb2\x39\x17\x3a\x1e\x19\xe3\x9d\xb7\xac\x6a\x0e\xdc\x94\xc9\x36\x91\x1c\xc7\xdd\xb8\x4b\x99\xaa\x0a\x16\xf7\x13\xee\xdc\xee\x2e\x2e\xa5\x8e\xb9\x73\x04\x2c\xaa\x8c\x38\xbf\x50\xe8\x0a\x44\x4f\x86\x51\x3b\xfc\xa4\x9d\x7e\x88\x47\x46\x2c\x1a\xa5\x42\x4e\x81\x2b\xe6\x5c\x46\x1a\x49\x4c\x6a\xb4\x04\x86\x9d\xa8\xb5\xab\x07\x01\x27\x23\x25\xb3\xb9\xd4\xd4\x9b\xea\xec\xe4\x1b\xf2\x92\xc2\xa2\xb7\xad\xb6\x9b\x68\xaf\x8b\x35\xb3\x66\x56\x07\x9d\x15\x75\x25\x3d\x0d\x17\xa1\xa0\x56\x9b\x3b\x25\x9d\xa7\xb9\x35\x75\x15\x6e\xa3\x94\xfd\xf9\x86\x4a\x8f\x25\x08\xe9\xd8\x48\xa1\x20\xeb\xa9\xbe\x09\x3a\x5a\xc0\x5f\x6a\x27\x79\x9a\xb0\x90\x58\x2e\xc1\x32\x9d\x23\xc4\x3f\xa8\x51\x5d\x3a\x58\xad\x5e\x44\x5e\x03\x26\x4d\x1a\x75\xb2\x5c\xc6\x77\x8d\x8b\xab\xd5\x16\x3e\x75\x15\xd3\x9b\x6a\xcf\xf2\xe6\xbf\x99\x0a\x1c\xb3\x5a\xf9\x10\x57\x52\x29\xa8\x6a\xa5\xe8\xdc\x51\x2b\xf3\xc2\xb7\x6a\x1a\x2e\xf1\x85\xa9\xb5\x5f\x93\x68\x8d\x6a\xe0\xb6\xe0\xcd\x93\xd0\x10\x56\xab\x3d\x09\xa8\x45\x5b\xd3\x96\xd4\x2a\x4c\x35\x11\x72\xfa\x5f\xc6\xbb\x9b\xcd\x07\xd4\x16\xdd\x1e\xad\xe5\x12\xfe\x9f\x37\x49\x38\xcb\x76\x8c\x5e\xe5\xc9\x9b\x17\x45\xad\xf3\x7f\xe5\x4d\x60\xfd\x8f\xfd\xd9\xf0\x5c\xad\x92\xfd\x3e\xdb\x26\x87\x04\x82\x13\xff\xde\xc3\x0d\xdc\xbe\x8f\xd1\x81\x89\x41\x23\x00\xec\x9e\xa3\x16\xed\xd3\xaf\x79\xd9\xe6\xf6\x62\x76\xb0\x36\x72\xe9\x8b\x7a\x14\x36\x45\x65\xd4\xa2\x2a\xd1\x26\x23\x66\x35\xe3\x0a\xc9\xf0\xd6\xd4\x96\x23\x5c\x18\x81\xed\xa0\xd7\x58\x2d\x6c\xbb\x07\x42\xdc\xec\xe4\xf3\xcd\x36\x01\x6e\x2c\xc2\x15\x9b\xb2\x5b\x6e\x65\xe5\x3b\x11\x64\xaf\xfe\x0b\xdb\x7b\x8b\x7d\xad\x18\x47\x01\xcc\x83\x2f\x30\x48\x36\xe3\x10\x0a\xc3\xeb\x12\xb5\x07\x67\xc2\xb9\x62\x39\x3a\x50\x86\x09\x18\x33\xe7\xd1\xee\x70\xdc\x9a\x8c\xb3\x7c\xa7\x9f\x1b\x81\xf1\xe4\xa9\x46\xbb\x08\x43\x68\x43\xda\x8f\xfb\xf1\x71\xd8\x8a\x13\x47\x3a\x91\xd4\x1e\x73\x2b\xfd\x22\x23\xae\x60\xfd\x93\x53\x7a\x3e\x2a\x84\x9a\x7e\x1a\x27\xf3\xbb\xfb\xef\xf3\x09\xeb\x5e\x3e\xbd\xfb\x51\xce\x3e\xbd\x1f\xfc\xcc\x2e\x6e\xee\xbe\xcc\x1f\x3e\xde\xd4\x1e\xd5\xdd\xf1\x71\x46\x3a\x11\xb7\xc6\x39\x63\x65\x2e\x75\x46\x98\x36\x7a\x51\x9a\xda\x91\x61\x9a\xb4\xac\x9e\x51\x84\xe7\x0c\x85\x9e\xb8\x98\x2b\x53\x8b\xb1\x62\x16\x03\x4d\x36\x61\xf3\x44\xc9\x91\x4b\x3c\xfa\x02\x6d\xd2\x8b\xfb\x71\x37\x99\x6c\xce\x1b\xea\xf0\x9c\xf9\xbb\xc1\x31\xbd\x56\xa3\x32\x1f\x5c\xdd\xf7\x07\x1f\xdf\xa3\x9a\x5e\xfd\xc6\x64\xb7\xa7\x06\x9f\x17\x0f\xbf\xdb\xfb\xcf\x1f\x06\xfd\x93\xf2\x88\x3f\x74\xf1\xf2\xf2\xb6\x37\xfe\x4e\x24\x13\x77\x2a\x1f\xa7\x8b\xde\xd1\x97\xa3\xbc\xbe\xfe\xe9\x9c\xc0\x57\xc5\x44\x7f\xaf\xe6\xb5\x9f\xa9\xc9\xe1\x57\x6a\xf2\x6c\x6a\x9d\x34\x69\x7f\x21\xfc\x11\x00\x00\xff\xff\x14\x73\x7e\x54\x29\x08\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 2089, mode: os.FileMode(420), modTime: time.Unix(1474388890, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPlaylistHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\x4d\x73\xdb\x38\x12\x3d\x4b\xbf\xa2\x17\xeb\x54\xe4\x72\x48\x4a\x8e\x9d\xf5\xda\xa2\xb7\x62\x7b\x93\xc9\xc7\x4c\x1c\xdb\x35\x89\x93\xca\x01\x02\x5a\x24\x24\x10\x60\x00\x50\x36\x47\xa5\xff\x3e\x05\x50\xa4\x65\x27\xa9\xa9\xcc\x61\x74\x11\xd8\x44\xbf\x7e\xef\x75\x93\xc4\x38\x77\x85\x3c\xee\x03\x00\x8c\x73\xa4\xfc\xb8\xdf\x1b\xff\x2b\x8a\xe0\x02\xbf\x56\xc2\x20\x87\x02\x1d\x05\x47\x33\x0b\x54\xde\xd0\xda\x02\xd3\x05\xc2\x54\x18\xeb\x20\x8a\xfc\xf6\xb0\x83\xe5\xd4\x58\x74\x29\xa9\xdc\x34\x3a\x20\x5d\x5c\xd1\x02\x53\xb2\x10\x78\x53\x6a\xe3\x08\x30\xad\x1c\x2a\x97\x92\x1b\xc1\x5d\x9e\x72\x5c\x08\x86\x51\xb8\x78\x02\x42\x09\x27\xa8\x8c\x2c\xa3\x12\xd3\xd1\x13\xb0\xb9\x11\x6a\x1e\x39\x1d\x4d\x85\x4b\x95\xbe\xc3\xcd\x9d\x2b\x23\xcf\x71\x91\x92\xdb\xa8\xa2\x11\xd3\x45\x49\x9d\x98\x48\xdc\x28\x22\x30\x45\x9e\xa1\x4f\xeb\xf7\xc6\x4e\x38\x89\xc7\xcb\x25\xc4\x57\x7e\x05\xab\xd5\x38\x69\x62\xfd\x7e\x6f\x2c\x85\x9a\x43\x6e\x70\x9a\x12\x0f\x6e\x0f\x93\xa4\xa0\xb7\x8c\xab\x78\xa2\xb5\xb3\xce\xd0\xd2\x5f\x30\x5d\x24\x5d\x20\xd9\x8b\x87\xf1\x30\xa2\xb2\xcc\x69\xbc\x9b\x30\x6b\xef\xee\xc5\x85\x50\x31\xb3\x96\x80\x41\x99\x12\xeb\x6a\x89\x36\x47\x74\x64\x6d\x77\xd2\xf8\x1d\xd6\x13\xcd\x6b\xaf\x8d\x8b\x05\x30\x49\xad\x4d\x89\x17\x41\x85\x42\xe3\xd9\x37\xfd\x19\x41\x40\x49\x49\x41\x4d\x26\x54\xe4\x74\x79\xb8\xff\x88\x3c\x90\x94\x8f\xda\x04\xda\x62\x4d\x9c\x82\x89\x53\x51\x69\x44\x41\x4d\x4d\xd6\x3a\x13\x72\x7c\x81\xae\x32\x0a\x9c\x86\x53\x2d\x25\x32\x27\xb4\x1a\x27\xb4\x2b\x69\xda\xd5\x06\x33\xa3\x6f\x08\x1c\xf7\x7b\x0f\xe8\xca\xa8\xe0\xd1\xbe\x67\xbb\xae\x5e\x71\xa1\x5b\xc6\xa1\xc3\x87\xa3\xe1\xf0\x11\x01\xc1\x1b\x75\x46\xcb\xa6\x57\x46\x4b\xeb\xd3\x7a\x63\xab\x2b\xc3\x10\xac\x61\x29\x21\xe0\xea\x12\x53\x12\x70\x92\xa2\xc4\x2c\x60\xf7\xae\x75\x65\x60\x62\xf4\x8d\x45\x03\x5c\xa3\x05\xa5\x1d\xd8\xaa\xf4\x13\x06\x2e\x47\x68\x2a\xa3\xc4\x02\x95\x8b\x5b\x3e\x49\x08\x77\xf4\x82\xb4\x66\x59\xc9\x56\x85\x14\xd6\x45\x99\xd1\x55\xd9\xd0\xb4\x5a\x65\x3e\xd6\x54\x5e\x2e\xc1\x50\x95\x21\x6c\x89\x27\xb0\x65\xe1\x30\x85\xf8\x52\xab\xcc\xc2\x6a\x15\xe8\xd3\xb5\xb1\xff\x6e\xb2\x97\xcb\x2d\xb1\x5a\x91\x6f\xc1\x23\xe1\xb0\x20\x3e\x05\x00\xb4\x62\x52\xb0\x79\x4a\x2c\xe2\x7c\xb0\x5c\xc2\x96\x80\xd5\x6a\x3b\xb4\x75\xcb\x86\x96\xd2\xb6\x3c\x2a\xde\xd4\x6a\x14\x55\xf2\xb8\x59\xfa\x66\x24\x5c\x2c\xfe\xba\x2b\xa2\xc8\xbe\xd7\x93\xe0\xb8\x9f\xa3\x53\xbd\x40\x03\x1b\xac\x45\x91\x45\x46\x57\x8a\xfb\x97\x41\x74\x1b\xd1\xca\x69\xe0\xd1\x44\x6a\x36\x27\x40\xa5\xf3\x55\x7c\x0e\x35\x8d\x4d\x2d\x91\x86\x62\xb3\xee\xfe\x2d\x33\xa2\x74\xfe\x6e\x92\xc0\x39\xb5\x16\xa8\x31\xb4\x06\x3d\x05\x1b\x9c\x94\x9a\xfa\x4a\x93\x1a\x5e\xea\x7e\x0f\x16\xd4\x40\x29\x69\xed\xbd\x83\x14\x3e\x7f\x39\x6a\x83\xda\x0a\x3f\xac\x90\xc2\xb0\x8d\xb5\xdd\x82\x14\xb8\x66\x55\xe8\x7e\x86\xee\xff\xcd\x20\xd8\x93\xfa\xd4\x4b\xfa\x8d\x16\x38\xf8\xa6\x19\xdb\x2d\x08\xad\xf8\xf7\xf3\x4f\xea\x57\x7c\xd0\x0d\x6e\xd8\xdf\x0d\x44\x7c\x4e\x5d\xde\x8c\x41\x47\x37\x2e\x2b\x9b\x0f\x82\xa9\xde\xcf\x90\xc0\xb4\xb2\x5a\x62\x2c\x75\x36\x20\xe7\x95\xcd\x3b\x9c\xb6\xb3\xf7\xb7\x5c\xa2\x7b\xce\x9c\x58\x60\xb3\x6f\x5a\xa9\xf0\x84\x82\x6d\xe3\x03\xc1\x6f\xb7\x61\xd9\xb8\x0d\x53\x6d\x60\xe0\x45\x88\x60\x0b\x08\x18\x77\xa6\xc4\x12\x55\xe6\xf2\x23\x10\x3b\x3b\x21\xa3\xd7\xdd\xfa\x2c\xbe\xc4\xa1\xdb\x6f\xfd\x3e\x83\x85\x5e\xe0\xe0\x31\x0d\x05\x1e\x87\xc2\xfe\xb7\x5a\xff\xff\xc8\x1a\xcf\x64\x03\x86\x72\x7e\x1f\x63\xd5\x34\xfd\xea\xdd\xd9\xbb\x43\x78\xce\x39\xd8\xb9\x28\xbb\xe7\xbf\xdf\xf3\xce\xc7\xd6\x30\x48\x3b\x0b\x3f\x0f\x43\xbf\xfd\x0d\x1f\x1a\x04\x9c\x3b\xed\xed\x0c\x84\x70\x92\xc0\xaf\x74\x8e\x10\x06\x80\x0b\xeb\x13\x80\x55\xc6\xa0\x72\x41\xe9\x1a\x48\x2b\x0c\xb3\x9c\x76\x6e\x0e\xee\x0c\x6c\x11\x77\x76\x5a\xd5\x49\xd2\xf5\xd3\xe6\x62\xea\x06\xdb\x77\x77\xd6\x5a\xde\x20\x7a\x1d\x65\x1d\xfc\x37\xe8\x13\x84\xca\xfe\xb7\xde\xf7\x1d\x59\x6d\x99\x2f\x47\x1b\x7b\xfc\xe4\xdf\xa1\xdf\xd7\xec\x7f\x3f\xd0\xbd\xba\x37\x18\x06\x1b\x98\xb5\x22\xa9\x19\xf5\xf1\xb8\x8d\x1f\xf9\x77\x45\x68\xc5\xc6\x2c\xe1\x7c\x20\xf8\xb7\x26\x40\x0a\x82\x1f\xfd\x43\x2a\xfc\x27\x38\xe9\xde\x0e\xe1\x0c\x72\xd2\x7e\x4a\x81\x69\x83\xf0\x9a\x2e\xe8\x65\xd8\xb0\x86\x4a\x7f\xfa\xb7\x3e\xb1\x78\xf0\x73\x49\x19\x72\xa0\xcd\x17\xc3\x3f\x7d\x7a\x1a\x96\xed\x78\x83\xd5\xe1\xba\xa4\x19\x36\xaf\x25\x98\x52\xeb\xd0\xac\x41\xec\x06\x95\xf0\xf6\x6c\x4f\x0d\x4c\x73\x8c\x67\x5f\x2b\x34\x75\x38\x2d\x34\xcb\x68\x37\xde\x8d\xf7\xc2\xa1\x60\x66\x49\x93\x26\x94\xc3\xcc\x08\x57\xa7\xc4\xe6\x74\x77\xff\x59\x74\x32\xc9\xb9\x5c\xbc\x9f\x26\xb7\x57\xd7\xff\xcd\x66\x74\x78\xf6\xf5\xe9\x2f\xe2\xe6\xfd\x8b\x83\xb7\xf4\xf4\xe2\xea\xe3\xed\xa7\x37\x17\x95\x43\x79\xb5\xb7\x97\xae\x41\x98\xd1\xd6\x6a\x23\x32\xa1\x52\x42\x95\x56\x75\xa1\x2b\x4b\x8e\x3b\x37\x7b\x1d\xd9\x07\x3c\xb9\x9a\xd9\x98\x49\x5d\xf1\xa9\xa4\x06\x03\x59\x3a\xa3\xb7\x89\x14\x13\x9b\x38\x74\x39\x9a\x64\x14\xef\xc6\xc3\x64\xd6\x5e\xb7\x02\x1e\x70\x7f\x7a\xb0\x17\x9d\xcb\x49\x91\x1d\xbc\xbe\xde\x3d\x78\xf3\x02\xe5\xe2\xf5\xef\x54\x0c\x47\xf2\xe0\x43\xfd\xe9\x0f\x73\xfd\xe1\xe5\xc1\xee\x7e\xb1\xc3\x3e\x0d\xf1\xec\xec\x72\x34\xfd\x0f\x4f\x66\xf6\x99\x98\x2f\xea\xd1\xce\xc7\x9d\xac\x3a\x7f\x75\x42\xfe\xbe\x94\x9f\x3d\xa8\xcd\x1e\x9e\xd3\x66\x9b\x55\xd6\xc7\xb3\xe6\x4c\x36\x4e\x9a\x13\xf2\x9f\x01\x00\x00\xff\xff\x32\x83\x64\x20\x29\x0b\x00\x00")

func templatesPlaylistHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesPlaylistHtml,
		"templates/playlist.html",
	)
}

func templatesPlaylistHtml() (*asset, error) {
	bytes, err := templatesPlaylistHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/playlist.html", size: 2857, mode: os.FileMode(420), modTime: time.Unix(1474388938, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.html": templatesIndexHtml,
	"templates/playlist.html": templatesPlaylistHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{}},
		"playlist.html": &bintree{templatesPlaylistHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

