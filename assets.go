// Code generated by go-bindata.
// sources:
// templates/index.html
// templates/playlist.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x54\x41\x6f\xe3\x36\x13\x3d\x4b\xbf\x82\x1f\x81\x0f\x3d\x64\x29\xda\xde\x64\xeb\x2e\x24\x03\x4d\x82\x6d\x9b\x2d\xd0\x6c\x12\x74\x37\xb9\x8d\xc9\x91\x44\x87\x22\x15\x72\xe4\xd8\x35\xfc\xdf\x0b\x49\x71\xd2\x6c\xd1\x16\xeb\xd3\x0c\x3d\xf3\xe6\xbd\x37\x22\xf3\x9a\x1a\xbb\x48\x19\x63\x2c\xaf\x11\xf4\x22\x4d\xf2\xff\x09\xc1\xae\xf0\xa1\x33\x01\x35\x6b\x90\x80\x11\x54\x91\x81\x7d\x84\x6d\x64\xca\x37\xc8\x4a\x13\x22\x31\x21\xfa\xf2\xa1\x42\xd5\x10\x22\x52\xc1\x3b\x2a\xc5\x9c\x3f\x9f\x3b\x68\xb0\xe0\x6b\x83\x8f\xad\x0f\xc4\x99\xf2\x8e\xd0\x51\xc1\x1f\x8d\xa6\xba\xd0\xb8\x36\x0a\xc5\x90\xbc\x61\xc6\x19\x32\x60\x45\x54\x60\xb1\x98\xbe\x61\xb1\x0e\xc6\xdd\x0b\xf2\xa2\x34\x54\x38\xff\x82\x5b\x13\xb5\xa2\xe7\xb8\x2e\xf8\x46\x74\x20\x94\x6f\x5a\x20\xb3\xb4\xf8\x97\x21\x06\x0b\xd4\x15\xf6\x6d\x69\x92\x93\x21\x8b\x8b\xdd\x8e\x65\xbf\x3d\x3a\x0c\x6c\xbf\xff\x2e\xb2\x33\x6f\x2d\x2a\x32\xde\xe5\x72\x2c\x48\xd3\x24\xb7\xc6\xdd\xb3\x3a\x60\x59\xf0\x7e\x52\x7c\x2f\x65\x03\x1b\xa5\x5d\xb6\xf4\x9e\x22\x05\x68\xfb\x44\xf9\x46\x3e\x1f\xc8\xe3\x6c\x92\x4d\x04\xd8\xb6\x86\x6c\x26\x55\x8c\x2f\xff\x65\x8d\x71\x99\x8a\x91\xb3\x80\xb6\xe0\x91\xb6\x16\x63\x8d\x48\x7c\x91\x8c\xe6\xcb\xd1\xfd\x21\x5e\x7a\xbd\xed\x95\x6a\xb3\x66\xca\x42\x8c\x05\xef\x25\x81\x71\x18\x38\x5b\xa4\xc9\xb8\xae\x29\x1b\x70\x0a\xde\x40\xa8\x8c\x13\xe4\xdb\xf7\x27\xff\xe7\xff\xa6\xb0\x9e\x1e\xba\x3b\x7b\x80\xb6\x26\x92\xa8\x82\xef\xda\xde\xa7\x64\xb7\x63\x01\x5c\x85\x2c\xfb\xd1\x2e\xbb\x26\xb2\xfd\x3e\x4d\x92\x1c\xfe\x5e\x2e\x0c\x61\xc3\x47\x9b\x64\x7f\x8c\x4e\xee\x76\xd9\x4d\xef\xe2\x7e\xdf\x63\x0d\x93\x62\x0b\xee\xd0\x4c\x50\xf5\x1f\x93\xd0\x58\x42\x67\x69\x88\x5b\x63\x2d\x6b\x3b\x6b\xc5\x26\x8a\x60\xaa\x9a\x06\x1e\x3d\x91\xec\xcc\x77\x8e\x46\x06\xa3\x4b\x3d\xd8\x01\xb9\x2f\x18\x86\xb1\xfd\x3e\x97\xf0\x44\x1e\x9d\x1e\x1a\xc6\xfa\xce\x1e\x04\xc3\x57\xfb\xac\x0c\xd5\xdd\x72\x58\x61\xeb\xed\xb6\x6d\x30\xc8\x25\x04\x07\xca\x22\x5f\x5c\xfb\x2e\x28\x64\x67\x5e\xe3\x08\x9d\x4b\x6d\xd6\x4f\xfb\x91\xe3\x82\x86\xb8\xbf\x2c\xa7\x87\x35\x33\xe5\x03\xb2\x0b\x58\xc3\xb5\x0a\xa6\xa5\x34\x61\xc5\x37\xff\x86\x6b\xf5\x8c\x7d\x69\x41\xa1\x66\x40\x8c\x6a\x1c\xc4\xf9\x72\x08\xb5\x57\x5d\x83\x8e\x58\xf4\x43\xde\x42\x85\x91\x59\x0f\x9a\x95\x10\x09\xc3\x0b\x4e\x7c\x22\x13\x83\x7a\xd1\xaf\xbc\xc6\x6c\xf5\xd0\x61\xd8\x0e\x26\x8c\xa1\x98\x65\xb3\xec\x78\xf8\x5c\x57\x91\xa7\x89\x71\x84\x55\x30\xb4\x2d\x78\xac\x61\x76\xf2\x4e\x9c\x2e\x6b\x6d\xd7\x9f\x4a\xb9\xb9\xb9\xfd\xa1\x5a\xc1\xe4\xfc\xe1\xed\xcf\xe6\xf1\xd3\x87\xf9\xaf\x70\x76\x75\xf3\x65\x73\xf7\xf1\xaa\x23\xb4\x37\xc7\xc7\x05\x4f\x13\x15\x7c\x8c\x3e\x98\xca\xb8\x82\x83\xf3\x6e\xdb\xf8\x2e\xf2\x45\x2e\x47\x56\xaf\x28\xb2\xd7\x0c\xb5\x5b\xc5\x4c\x59\xdf\xe9\xd2\x42\xc0\x81\x26\xac\x60\x23\xad\x59\x46\x49\x48\x35\x06\x39\xcd\x66\xd9\x44\xae\x0e\xf9\x81\x3a\x7b\xcd\xfc\xed\xfc\x58\x5c\xda\x65\x53\xcd\x2f\x6e\x67\xf3\x8f\x1f\xd0\xae\x2f\x7e\x07\x33\x99\xda\xf9\xe7\xed\xdd\x1f\xe1\xf6\xf3\x4f\xf3\xd9\x49\x73\xa4\xee\x26\x78\x7e\x7e\x3d\x2d\xbf\xd7\x72\x15\xdf\x99\xfb\xf5\x76\x7a\xf4\xe5\xa8\xea\x2e\x7f\x39\xe5\xec\x3f\xc5\x24\xff\xac\xe6\x5b\xdf\x8f\xd5\xd7\xcf\xc7\xea\x95\x6b\x69\x2e\xc7\xa7\xfb\xcf\x00\x00\x00\xff\xff\x58\x70\xa7\x91\xc2\x05\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 1474, mode: os.FileMode(420), modTime: time.Unix(1474040479, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPlaylistHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\xdd\x72\xdb\x36\x13\xbd\x96\x9e\x62\x3f\x7c\xce\x44\x1e\x9b\xa4\xa4\xd8\xa9\x6b\x8b\xee\xc4\x76\x93\xe6\xa7\x8d\xe3\x78\x9a\x38\x19\x5f\x40\xc4\x8a\x84\x04\x02\x0c\x00\xca\x66\x35\x7a\xf7\x0e\xc0\x1f\x2b\x76\x32\x9d\xf4\xa2\xba\x11\xb8\xdc\x3d\x7b\xce\xee\x92\xdc\x49\x66\x73\x71\xdc\x07\x00\x98\x64\x48\xd9\x71\xbf\x37\xf9\x5f\x10\xc0\x05\x7e\x29\xb9\x46\x06\x39\x5a\x0a\x96\xa6\x06\xa8\xb8\xa1\x95\x81\x44\xe5\x08\x33\xae\x8d\x85\x20\x70\xee\xde\x23\xc9\xa8\x36\x68\x63\x52\xda\x59\x70\x40\x3a\xbb\xa4\x39\xc6\x64\xc9\xf1\xa6\x50\xda\x12\x48\x94\xb4\x28\x6d\x4c\x6e\x38\xb3\x59\xcc\x70\xc9\x13\x0c\xfc\xc5\x2e\x70\xc9\x2d\xa7\x22\x30\x09\x15\x18\x8f\x76\xc1\x64\x9a\xcb\x45\x60\x55\x30\xe3\x36\x96\xea\x0e\x37\xb3\xb6\x08\x1c\xc7\x65\x4c\x6e\x83\x92\x06\x89\xca\x0b\x6a\xf9\x54\xe0\x46\x12\x8e\x31\xb2\x14\x5d\x58\xbf\x37\xb1\xdc\x0a\x3c\x5e\xad\x20\xbc\x74\x27\x58\xaf\x27\x51\x6d\xeb\xf7\x7b\x13\xc1\xe5\x02\x32\x8d\xb3\x98\x38\x70\x73\x18\x45\x39\xbd\x4d\x98\x0c\xa7\x4a\x59\x63\x35\x2d\xdc\x45\xa2\xf2\xa8\x33\x44\x7b\xe1\x30\x1c\x06\x54\x14\x19\x0d\xc7\x51\x62\xcc\xdd\xbd\x30\xe7\x32\x4c\x8c\x21\xa0\x51\xc4\xc4\xd8\x4a\xa0\xc9\x10\x2d\x69\xca\x1d\xd5\xf5\xf6\xe7\xa9\x62\x95\xd3\xc6\xf8\x12\x12\x41\x8d\x89\x89\x13\x41\xb9\x44\xed\xd8\xd7\xfd\x19\x81\x47\x89\x49\x4e\x75\xca\x65\x60\x55\x71\xb8\xff\x88\xdc\x93\x94\x8d\xda\x00\xda\x62\x4d\xad\x84\xa9\x95\x41\xa1\x79\x4e\x75\x45\x1a\x9d\x11\x39\xbe\x40\x5b\x6a\x09\x56\xc1\xa9\x12\x02\x13\xcb\x95\x9c\x44\xb4\x4b\xa9\xdb\xd3\x06\x33\xad\x6e\x08\x1c\xf7\x7b\xf7\xe8\x8a\x20\x67\xc1\xbe\x63\xdb\x64\x2f\x19\x57\x2d\xe3\x1b\xce\x32\x7b\x38\x1a\x0e\x1f\x11\xe0\xac\x56\xa7\x95\xa8\x7b\xa5\x95\x30\x2e\xac\x37\x31\xaa\xd4\x09\x82\xd1\x49\x4c\x08\xd8\xaa\xc0\x98\x78\x9c\x28\x2f\x30\xf5\xd8\xbd\x2b\x55\x6a\x98\x6a\x75\x63\x50\x03\x53\x68\x40\x2a\x0b\xa6\x2c\xdc\x84\x81\xcd\x10\xea\xcc\x28\x30\x47\x69\xc3\x96\x4f\xe4\xcd\x1d\x3d\x2f\xad\x3e\x96\xa2\x55\x21\xb8\xb1\x41\xaa\x55\x59\xd4\x34\x8d\x92\xa9\xb3\xd5\x99\x57\x2b\xd0\x54\xa6\x08\x5b\x7c\x17\xb6\x0c\x1c\xc6\x10\xbe\x57\x32\x35\xb0\x5e\x7b\xfa\xb4\x29\xec\xff\x7d\xf4\x6a\xb5\xc5\xd7\xeb\x87\xd0\x01\xb7\x98\x13\x17\x00\x00\x4a\x26\x82\x27\x8b\x98\x18\xc4\xc5\x60\xb5\x82\x2d\x0e\xeb\xf5\xb6\x6f\xea\x96\xf1\x0d\xa5\x6d\x72\x94\xac\xce\x54\xeb\x29\xc5\x71\x7d\x74\xad\x88\x18\x5f\xfe\x73\x4f\x78\x9e\x6e\x74\xc4\x66\x4d\x47\x5c\xbd\xdd\x10\x9d\xaa\x25\x6a\xb8\xe3\xcc\xf3\x34\xd0\xaa\x94\xcc\xbd\x08\x82\xdb\x80\x96\x56\x01\x0b\xa6\x42\x25\x0b\x02\x54\x58\x97\xc3\x85\x50\x6d\xc9\x43\x32\x35\xcd\xfa\x3c\x89\xba\x81\xf6\x8f\x9b\x49\x34\x2f\xac\x73\x8a\x22\x38\xa7\xc6\x00\xd5\x9a\x56\xa0\x66\x60\x7c\x49\x85\xa2\x2e\xed\xb4\x82\x17\xca\x7b\x2d\xa9\x86\x42\xd0\xca\x15\x12\x62\xf8\x4c\x72\x64\x9c\x46\x86\xe6\x85\xc0\x51\x98\x17\x4f\xc8\x2e\x7c\x65\x1c\x7b\xe3\x75\xbf\x07\xf7\x63\xaf\x8f\x5a\xa3\x32\xdc\xcd\x3c\xc4\x30\x6c\x6d\x6d\xd3\x21\x06\xa6\x92\xd2\x0f\x51\x8a\xf6\xd7\x7a\x9e\xcc\x49\x75\xea\xaa\xf3\x07\xcd\x71\xf0\xa0\xab\xdb\x2d\x08\x2d\xd9\xb7\xe3\x4f\xaa\x97\x6c\xd0\xcd\xbf\xf7\xef\xe6\x2a\x3c\xa7\x36\xab\xa7\xa9\xa3\x1b\x16\xa5\xc9\xdc\x60\x84\x6e\x2e\x1a\xf7\x76\x12\xa0\xdf\x83\x59\x29\xfd\x63\x0b\x06\xed\xb3\xc4\xf2\x25\x0e\x38\xbb\xdd\x86\x55\xdd\x00\x98\x29\x0d\x03\x47\x89\x7b\x91\xc0\x61\xd2\x49\x0c\x05\xca\xd4\x66\x47\xc0\x77\x76\x7c\x44\xaf\xbb\xf5\x99\x5f\x87\x7e\x0c\xde\x38\x3f\x8d\xb9\x5a\xe2\xe0\x31\xf5\x09\x1e\x7b\x1e\xee\xb7\x6e\xfe\xbf\x27\xd4\x31\xd9\x80\xa1\x8c\x7d\x8d\xb1\xae\x07\xe0\xf2\xed\xd9\xdb\x43\x78\xc6\x18\x98\x05\x2f\xba\x97\x42\xbf\xe7\xea\x18\x1a\x9d\x40\xdc\x15\xe4\xf3\xd0\x77\xcf\xdd\x70\xa6\x81\xc7\xb9\xd3\xde\x76\xd4\x9b\xa3\x08\x7e\xa7\x0b\x04\xdf\x4e\xc6\x8d\x0b\x80\xa4\xd4\x1a\xa5\xf5\x4a\x1b\x20\x25\xd1\x0f\x79\xdc\x55\x73\x70\x57\xc0\x16\x71\x67\xa7\x55\x1d\x45\x5d\x77\x4c\xc6\x67\x76\xb0\x7d\x77\xa7\xd1\xf2\x1a\xd1\xe9\x28\x2a\x5f\x7f\x8d\x2e\x80\xcb\xf4\x97\xc6\xef\x1b\xb2\xda\x34\xd7\x47\x1b\x3e\xee\x29\xb8\x43\xff\x5a\xb3\xfb\x7d\x47\xf7\xfa\x68\x73\x30\x34\xd6\x30\x8d\x22\xa1\x12\xea\xec\x61\x6b\x3f\x72\x4f\xad\x6f\xc5\xc6\x2c\xe1\x62\xc0\xd9\xc3\x22\x40\x0c\x9c\x1d\xfd\x47\x2a\xdc\x8b\x22\xea\xde\x14\x7e\x31\x39\x69\xbf\xaf\x90\x28\x8d\xf0\x8a\x2e\xe9\x7b\xef\xd0\x40\xc5\x3f\xfc\x6b\xd6\x18\x07\x7e\x2e\x68\x82\x0c\x68\xfd\x19\x71\x0f\x99\x9a\xf9\x63\x3b\xde\x60\x94\xbf\x2e\x68\x8a\xf5\x2b\x0a\x66\xd4\x58\xd4\x0d\x88\xd9\xa0\xe2\x3f\x62\xed\x2a\x91\x28\x86\xe1\xfc\x4b\x89\xba\xf2\x2b\x44\x7d\x0c\xc6\xe1\x38\xdc\xf3\x9b\xc2\xdc\x90\x3a\x8c\x4b\x8b\xa9\xe6\xb6\x8a\x89\xc9\xe8\x78\xff\x69\x70\x32\xcd\x98\x58\xbe\x9b\x45\xb7\x97\x57\x3f\xa7\x73\x3a\x3c\xfb\xf2\xe4\x37\x7e\xf3\xee\xf9\xc1\x1b\x7a\x7a\x71\xf9\xf1\xf6\xd3\xeb\x8b\xd2\xa2\xb8\xdc\xdb\x8b\x1b\x90\x44\x2b\x63\x94\xe6\x29\x97\x31\xa1\x52\xc9\x2a\x57\xa5\x21\xc7\x5d\x35\x7b\x1d\xd9\x7b\x3c\x99\x9c\x9b\x30\x11\xaa\x64\x33\x41\x35\x7a\xb2\x74\x4e\x6f\x23\xc1\xa7\x26\xb2\x68\x33\xd4\xd1\x28\x1c\x87\xc3\x68\xde\x5e\xb7\x02\xee\x71\x7f\x72\xb0\x17\x9c\x8b\x69\x9e\x1e\xbc\xba\x1a\x1f\xbc\x7e\x8e\x62\xf9\xea\x4f\xca\x87\x23\x71\xf0\xa1\xfa\xf4\x97\xbe\xfa\xf0\xe2\x60\xbc\x9f\xef\x24\x9f\x86\x78\x76\xf6\x7e\x34\xfb\x89\x45\x73\xf3\x94\x2f\x96\xd5\x68\xe7\xe3\x4e\x5a\x9e\xbf\x3c\x21\xff\x5e\xca\x8f\x6e\x6f\xf3\xfb\xcb\xdb\x7c\x33\x4b\xb3\xb3\xd5\x8b\xda\x24\xaa\xd7\xe6\xbf\x03\x00\x00\xff\xff\xc8\x04\xa0\x43\x3e\x0b\x00\x00")

func templatesPlaylistHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesPlaylistHtml,
		"templates/playlist.html",
	)
}

func templatesPlaylistHtml() (*asset, error) {
	bytes, err := templatesPlaylistHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/playlist.html", size: 2878, mode: os.FileMode(420), modTime: time.Unix(1474255596, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.html": templatesIndexHtml,
	"templates/playlist.html": templatesPlaylistHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{}},
		"playlist.html": &bintree{templatesPlaylistHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

