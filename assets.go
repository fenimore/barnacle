// Code generated by go-bindata.
// sources:
// templates/index.html
// templates/playlist.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x55\xdf\x4f\x23\xb7\x13\x7f\x4e\xfe\x8a\xf9\xfa\xdb\xaa\x0f\x9c\x77\x93\x1c\xd0\x14\x65\x23\x15\xd0\x5d\xcb\x55\x2a\x07\xa8\x77\xf0\x36\xb1\x27\xbb\x0e\x5e\x7b\xb1\xbd\xf9\xd1\x28\xff\x7b\xb5\x5e\x92\x00\xbd\x72\x3d\xa9\x79\x1a\x8f\x3d\xf3\xf9\xe1\x78\x76\x54\x84\x52\x8f\xbb\x00\x00\xa3\x82\x50\x8e\xbb\x9d\xd1\xff\x38\x87\x2b\x7a\xa8\x95\x23\x09\x25\x05\x84\x80\xb9\x07\xd4\x0b\x5c\x79\x10\xb6\x24\x98\x2a\xe7\x03\x70\xde\x1c\x8f\x27\x44\x81\xce\x53\xc8\x58\x1d\xa6\x7c\xc8\x76\x79\x83\x25\x65\x6c\xae\x68\x51\x59\x17\x18\x08\x6b\x02\x99\x90\xb1\x85\x92\xa1\xc8\x24\xcd\x95\x20\x1e\x17\x6f\x40\x19\x15\x14\x6a\xee\x05\x6a\xca\xfa\x6f\xc0\x17\x4e\x99\x7b\x1e\x2c\x9f\xaa\x90\x19\xbb\xef\x5b\x84\x50\xf1\x86\xe3\x3c\x63\x4b\x5e\x23\x17\xb6\xac\x30\xa8\x89\xa6\x27\x20\x8a\x32\x92\x39\x35\x65\xdd\xce\x28\xa8\xa0\x69\xbc\x5e\x43\xf2\xfb\xc2\x90\x83\xcd\xe6\x07\x0f\x67\x56\x6b\x12\x41\x59\x33\x4a\xdb\x03\xdd\x6e\x67\xa4\x95\xb9\x87\xc2\xd1\x34\x63\x0d\x92\x3f\x49\xd3\x12\x97\x42\x9a\x64\x62\x6d\xf0\xc1\x61\xd5\x2c\x84\x2d\xd3\x5d\x22\x3d\x4c\x7a\x49\x8f\xa3\xae\x0a\x4c\x06\xa9\xf0\x7e\xbf\x97\x94\xca\x24\xc2\x7b\x06\x8e\x74\xc6\x7c\x58\x69\xf2\x05\x51\x60\xe3\x4e\x6b\x7e\xda\xba\x1f\xe3\x89\x95\xab\x46\xa9\x54\x73\x10\x1a\xbd\xcf\x58\x23\x09\x95\x21\xc7\x60\xdc\xed\xb4\xd7\xd5\x87\xd8\x27\x63\x25\xba\x5c\x19\x1e\x6c\x75\x72\xf4\x3d\x7b\x4d\x61\xd1\xdf\x55\xbb\x6d\xf4\x04\xc5\xd9\x45\xe3\xd5\x0b\x64\xcd\x7d\xc9\x8f\xe3\x46\x2c\xa8\xf5\x76\x4f\x2b\x1f\x78\xee\x6c\x5d\xc5\xdd\xce\x7a\x0d\x0e\x4d\x4e\x90\xfc\xac\x27\x75\xe9\x61\xb3\x69\xd2\x23\xfc\x7b\x01\x57\x81\x4a\xd6\x7a\x9c\x36\x69\x32\xe9\x7a\x9d\xdc\x34\x57\xb0\xd9\xc4\x6e\x11\xcc\x57\x68\xb6\xd5\x01\xf3\xe6\xaf\xc8\x25\x4d\xb1\xd6\x21\xc6\x95\xd2\x1a\xaa\x5a\x6b\xbe\xf4\xdc\xa9\xbc\x08\x2d\x95\x86\x4b\x72\x66\x6b\x13\x1e\x49\xb4\x2e\x37\xed\x76\xcd\x9b\x23\x11\x10\x36\x9b\x51\x8a\x5b\x09\x64\x64\x5b\xd3\x96\xd4\x3a\x5a\x92\x4a\x35\xff\x6f\xbc\x79\x4f\xc6\x91\x7f\x42\x6b\xbd\x86\xef\xf2\x26\x09\x27\xd9\x9e\xd1\xab\xce\x81\x54\x1e\x27\x9a\xe4\xa3\x85\xff\x7f\x55\xd4\x63\xfe\x4b\x77\x13\x59\xff\xeb\xfb\xd9\xf2\xdc\x6c\xd2\xa7\x38\x3b\x90\x2f\x12\x00\x80\x3d\x07\x32\xb2\x05\xfe\x9a\xd1\x6d\xee\x49\x8c\x2f\x1e\x64\xae\x42\x51\x4f\xe2\x1b\xac\xac\x5e\x55\x25\xb9\x74\x82\xce\xa0\xd0\xc4\xc6\xd7\xb6\x76\x82\xe0\xcc\x4a\x6a\x5d\x78\xec\xd5\xb6\x6d\x5f\x58\x8c\x9b\x69\x77\xba\x7d\xa7\x20\xac\x23\xb8\xc0\x39\x5e\x0b\xa7\xaa\xd0\xed\x40\xf6\xcd\xbf\x38\x17\x77\xbd\x2f\x35\x0a\x92\x80\x01\x42\x41\x51\xb2\x9d\xc6\x50\x5a\x51\x97\x64\x02\x78\x1b\xd7\x15\xe6\xe4\x41\x5b\x94\x30\x45\x1f\xc8\xed\xfb\xf8\x47\x32\xde\x89\xbd\x7e\x61\x25\x25\xb3\x87\x9a\xdc\x2a\x9a\xd0\x86\x7c\x90\x0c\x92\xc3\x38\x6f\x66\x9e\x75\x3b\xca\x04\xca\x9d\x0a\xab\x8c\xf9\x02\x07\x47\xc7\xfc\x74\x52\x48\x3d\xff\x38\x4d\x97\x37\xb7\x3f\xe5\x33\xec\x9d\x3f\xbc\xfd\x45\x2d\x3e\xbe\x1b\xfe\x86\x67\x57\x37\x9f\x97\x77\x1f\xae\xea\x40\xfa\xe6\xf0\x30\x63\xdd\x8e\x70\xd6\x7b\xeb\x54\xae\x4c\xc6\xd0\x58\xb3\x2a\x6d\xed\xd9\x78\x94\xb6\xac\x9e\x51\x84\xe7\x0c\xa5\x99\xf9\x44\x68\x5b\xcb\xa9\x46\x47\x91\x26\xce\x70\x99\x6a\x35\xf1\x69\xa0\x50\x90\x4b\xfb\xc9\x20\xe9\xa5\xb3\xed\x7a\x4b\x1d\x9e\x33\x7f\x3b\x3c\xe4\x97\x7a\x52\xe6\xc3\x8b\xdb\xc1\xf0\xc3\x3b\xd2\xf3\x8b\x3f\x50\xf5\xfa\x7a\xf8\x69\x75\xf7\xa7\xbb\xfd\xf4\x7e\x38\x38\x2a\x0f\xc4\x5d\x8f\xce\xcf\xaf\xfb\xd3\x1f\x65\x3a\xf3\xc7\xea\x7e\xbe\xea\x1f\x7c\x3e\xc8\xeb\xcb\x5f\x4f\x19\x7c\x55\x4c\xe7\x9f\xd5\x7c\xeb\x07\x60\xf6\x72\xfe\xcf\x9e\xb9\xd6\x1d\xa5\xed\xb7\xf7\xaf\x00\x00\x00\xff\xff\x9a\x83\xdc\xc7\x83\x07\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 1923, mode: os.FileMode(420), modTime: time.Unix(1474383102, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPlaylistHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\xdf\x73\xdb\x38\x0e\x7e\xb6\xff\x0a\x1c\x2f\x9d\x3a\x93\x4a\xb2\xd3\xa4\x97\x4b\xac\xdc\x34\xc9\xb5\xdb\x1f\xbb\x4d\x93\xcc\xb6\x69\xa7\x0f\x34\x09\x4b\xb4\x29\x52\x25\x29\x27\x5a\x8f\xff\xf7\x1d\x52\x96\xe2\xa4\xed\xec\x74\x1f\xd6\x2f\xa6\x20\xe0\xc3\xf7\x01\x30\x8d\x71\xee\x0a\x79\xdc\x07\x00\x18\xe7\x48\xf9\x71\xbf\x37\xfe\x57\x14\xc1\x05\x7e\xad\x84\x41\x0e\x05\x3a\x0a\x8e\x66\x16\xa8\xbc\xa1\xb5\x05\xa6\x0b\x84\xa9\x30\xd6\x41\x14\x79\xf7\xe0\xc1\x72\x6a\x2c\xba\x94\x54\x6e\x1a\x1d\x90\xce\xae\x68\x81\x29\x59\x08\xbc\x29\xb5\x71\x04\x98\x56\x0e\x95\x4b\xc9\x8d\xe0\x2e\x4f\x39\x2e\x04\xc3\x28\x3c\x3c\x01\xa1\x84\x13\x54\x46\x96\x51\x89\xe9\xe8\x09\xd8\xdc\x08\x35\x8f\x9c\x8e\xa6\xc2\xa5\x4a\xdf\xe1\xe6\xce\x95\x91\xe7\xb8\x48\xc9\x6d\x54\xd1\x88\xe9\xa2\xa4\x4e\x4c\x24\x6e\x24\x11\x98\x22\xcf\xd0\x87\xf5\x7b\x63\x27\x9c\xc4\xe3\xe5\x12\xe2\x2b\x7f\x82\xd5\x6a\x9c\x34\xb6\x7e\xbf\x37\x96\x42\xcd\x21\x37\x38\x4d\x89\x07\xb7\x87\x49\x52\xd0\x5b\xc6\x55\x3c\xd1\xda\x59\x67\x68\xe9\x1f\x98\x2e\x92\xce\x90\xec\xc5\xc3\x78\x18\x51\x59\xe6\x34\xde\x4d\x98\xb5\x77\xef\xe2\x42\xa8\x98\x59\x4b\xc0\xa0\x4c\x89\x75\xb5\x44\x9b\x23\x3a\xb2\x2e\x77\xd2\xd4\x3b\x9c\x27\x9a\xd7\x5e\x1b\x17\x0b\x60\x92\x5a\x9b\x12\x2f\x82\x0a\x85\xc6\xb3\x6f\xfa\x33\x82\x80\x92\x92\x82\x9a\x4c\xa8\xc8\xe9\xf2\x70\xff\x11\x79\x20\x29\x1f\xb5\x01\xb4\xc5\x9a\x38\x05\x13\xa7\xa2\xd2\x88\x82\x9a\x9a\xac\x75\x26\xe4\xf8\x02\x5d\x65\x14\x38\x0d\xa7\x5a\x4a\x64\x4e\x68\x35\x4e\x68\x97\xd2\xb4\xa7\x0d\x66\x46\xdf\x10\x38\xee\xf7\x1e\xd0\x95\x51\xc1\xa3\x7d\xcf\x76\x9d\xbd\xe2\x42\xb7\x8c\x43\x87\x0f\x47\xc3\xe1\x23\x02\x82\x37\xea\x8c\x96\x4d\xaf\x8c\x96\xd6\x87\xf5\xc6\x56\x57\x86\x21\x58\xc3\x52\x42\xc0\xd5\x25\xa6\x24\xe0\x24\x45\x89\x59\xc0\xee\x5d\xeb\xca\xc0\xc4\xe8\x1b\x8b\x06\xb8\x46\x0b\x4a\x3b\xb0\x55\xe9\x27\x0c\x5c\x8e\xd0\x64\x46\x89\x05\x2a\x17\xb7\x7c\x92\x60\xee\xe8\x05\x69\xcd\xb1\x92\xad\x0a\x29\xac\x8b\x32\xa3\xab\xb2\xa1\x69\xb5\xca\xbc\xad\xc9\xbc\x5c\x82\xa1\x2a\x43\xd8\x12\x4f\x60\xcb\xc2\x61\x0a\xf1\xa5\x56\x99\x85\xd5\x2a\xd0\xa7\xeb\xc2\xfe\x3b\x44\x2f\x97\x5b\x62\xb5\xfa\x16\x3a\x12\x0e\x0b\xe2\x03\x00\x40\x2b\x26\x05\x9b\xa7\xc4\x22\xce\x07\xcb\x25\x6c\x09\x58\xad\xb6\x43\x53\xb7\x6c\x68\x28\x6d\x93\xa3\xe2\x4d\xa6\x46\x4f\x25\x8f\x9b\xa3\x6f\x45\xc2\xc5\xe2\xaf\x7b\x22\x8a\xec\x7b\x1d\xf1\xf5\xf6\x43\x74\xaa\x17\x68\xe0\x8e\xb3\x28\xb2\xc8\xe8\x4a\x71\x7f\x11\x44\xb7\x11\xad\x9c\x06\x1e\x4d\xa4\x66\x73\x02\x54\x3a\x9f\xc3\x87\x50\xd3\x94\xa8\xa5\xd1\x10\x6c\xce\xe3\xa4\x1b\xe5\xf0\x43\xb3\xcc\x88\xd2\x79\xa7\x24\x81\x73\x6a\x2d\x50\x63\x68\x0d\x7a\x0a\x36\x14\x53\x6a\xea\x13\x4e\x6a\x78\xa9\xfb\x3d\x58\x50\x03\xa5\xa4\xb5\x2f\x20\xa4\xf0\xf9\xcb\x51\x6b\xd4\x56\xf8\x79\x85\x14\x86\xad\xad\x6d\x18\xa4\xc0\x35\xab\xc2\x00\x64\xe8\xfe\xdf\xcc\x82\x3d\xa9\x4f\xbd\xb2\xdf\x68\x81\x83\x6f\x3a\xb2\xdd\x82\xd0\x8a\x7f\x3f\xfe\xa4\x7e\xc5\x07\xdd\xec\x06\xff\x6e\x26\xe2\x73\xea\xf2\x66\x12\x3a\xba\x71\x59\xd9\xdc\x37\x35\xf6\x3d\xf5\xee\x4c\x2b\xab\x25\xc6\x52\x67\x03\x72\x5e\xd9\xbc\x43\x69\x9b\x7b\xdf\xe5\x12\xdd\x73\xe6\xc4\x02\x1b\xbf\x69\xa5\xc2\x4f\x14\x6c\x6b\x1f\x08\x7e\xbb\x0d\xcb\xa6\xe4\x30\xd5\x06\x06\x5e\x82\x08\x45\x01\x01\xe3\xae\x24\xb1\x44\x95\xb9\xfc\x08\xc4\xce\x4e\x88\xe8\x75\xaf\x3e\x8b\x2f\x71\x68\xf9\x5b\xef\x67\xb0\xd0\x0b\x1c\x3c\xa6\x21\xc1\xe3\x90\xd8\x7f\x56\xeb\xef\x1f\x15\xc6\x33\xd9\x80\xa1\x9c\xdf\xc7\x58\x35\x2d\xbf\x7a\x77\xf6\xee\x10\x9e\x73\x0e\x76\x2e\xca\xee\x02\xe8\xf7\x7c\xdd\x63\x6b\x18\xa4\x5d\x01\x3f\x0f\x43\xb7\xfd\x0b\x6f\x1a\x04\x9c\x3b\xed\xed\x04\x04\x73\x92\xc0\xaf\x74\x8e\x10\xda\xcf\x85\xf5\x01\xc0\x2a\x63\x50\xb9\xa0\x74\x0d\xa4\x15\x86\x81\x4e\xbb\x6a\x0e\xee\x0a\xd8\x22\xee\xec\xb4\xaa\x93\xa4\xeb\xa6\xcd\xc5\xd4\x0d\xb6\xef\xde\xac\xb5\xbc\x41\xf4\x3a\xca\x3a\xd4\xdf\xa0\x0f\x10\x2a\xfb\xdf\xda\xef\x3b\xb2\xda\x34\x5f\x8e\x36\x7c\xfc\xdc\xdf\xa1\xdf\xd7\xec\x3f\x3f\xd0\xbd\xba\x37\x18\x06\x1b\x98\xb5\x22\xa9\x19\xf5\xf6\xb8\xb5\x1f\xf9\xeb\x22\xb4\x62\x63\x96\x70\x3e\x10\xfc\xdb\x22\x40\x0a\x82\x1f\xfd\x43\x2a\xfc\xd5\x90\x74\x77\x43\x58\x42\x4e\xda\xff\x52\x60\xda\x20\xbc\xa6\x0b\x7a\x19\x1c\xd6\x50\xe9\x4f\x7f\xd6\x2b\x8b\x07\x3f\x97\x94\x21\x07\xda\xfc\x65\xf8\x5f\x9f\x9e\x86\x63\x3b\xde\x60\x75\x78\x2e\x69\x86\xcd\xa5\x04\x53\x6a\x1d\x9a\x35\x88\xdd\xa0\x12\xfe\xb0\xda\xb5\x81\x69\x8e\xf1\xec\x6b\x85\xa6\x0e\xeb\x42\x73\x8c\x76\xe3\xdd\x78\x2f\x6c\x05\x33\x4b\x9a\x30\xa1\x1c\x66\x46\xb8\x3a\x25\x36\xa7\xbb\xfb\xcf\xa2\x93\x49\xce\xe5\xe2\xfd\x34\xb9\xbd\xba\xfe\x6f\x36\xa3\xc3\xb3\xaf\x4f\x7f\x11\x37\xef\x5f\x1c\xbc\xa5\xa7\x17\x57\x1f\x6f\x3f\xbd\xb9\xa8\x1c\xca\xab\xbd\xbd\x74\x0d\xc2\x8c\xb6\x56\x1b\x91\x09\x95\x12\xaa\xb4\xaa\x0b\x5d\x59\x72\xdc\x55\xb3\xd7\x91\x7d\xc0\x93\xab\x99\x8d\x99\xd4\x15\x9f\x4a\x6a\x30\x90\xa5\x33\x7a\x9b\x48\x31\xb1\x89\x43\x97\xa3\x49\x46\xf1\x6e\x3c\x4c\x66\xed\x73\x2b\xe0\x01\xf7\xa7\x07\x7b\xd1\xb9\x9c\x14\xd9\xc1\xeb\xeb\xdd\x83\x37\x2f\x50\x2e\x5e\xff\x4e\xc5\x70\x24\x0f\x3e\xd4\x9f\xfe\x30\xd7\x1f\x5e\x1e\xec\xee\x17\x3b\xec\xd3\x10\xcf\xce\x2e\x47\xd3\xff\xf0\x64\x66\x9f\x89\xf9\xa2\x1e\xed\x7c\xdc\xc9\xaa\xf3\x57\x27\xe4\xef\x4b\xf9\xd9\x4d\x6d\xf6\x70\x51\x9b\x6d\x66\x59\xef\x67\xcd\x52\x36\x4e\x9a\x15\xf9\xcf\x00\x00\x00\xff\xff\x7e\xef\x7e\x3d\x2a\x0b\x00\x00")

func templatesPlaylistHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesPlaylistHtml,
		"templates/playlist.html",
	)
}

func templatesPlaylistHtml() (*asset, error) {
	bytes, err := templatesPlaylistHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/playlist.html", size: 2858, mode: os.FileMode(420), modTime: time.Unix(1474383166, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.html": templatesIndexHtml,
	"templates/playlist.html": templatesPlaylistHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{}},
		"playlist.html": &bintree{templatesPlaylistHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

