// Code generated by go-bindata.
// sources:
// data/index.html
// data/playlist.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x54\xdd\x6e\xe3\x36\x13\xbd\x96\x9e\x62\x3e\x02\x1f\x7a\x91\xa5\x68\x7b\x9d\xad\xbb\x90\x0c\x34\x09\xb6\x6d\xb6\x40\xb3\x49\xd0\xdd\xe4\x6e\x4c\x8e\x25\x3a\x14\xa9\x90\x94\x7f\x6a\xf8\xdd\x0b\x49\x71\xd2\x6c\xd1\x16\xab\xab\x99\xd1\xf0\xf0\x9c\xc3\x21\xf3\x2a\xd6\x66\x9e\x02\x00\xe4\x15\xa1\x9a\xa7\x49\xfe\x3f\xce\xe1\x9a\x1e\x5b\xed\x49\x41\x4d\x11\x21\x62\x19\x00\xcd\x06\x77\x01\xa4\xab\x09\x96\xda\x87\x08\x9c\x77\xed\x7d\x87\xac\xd0\x07\x8a\x05\x6b\xe3\x92\xcf\xd8\x73\xdd\x62\x4d\x05\x5b\x6b\xda\x34\xce\x47\x06\xd2\xd9\x48\x36\x16\x6c\xa3\x55\xac\x0a\x45\x6b\x2d\x89\xf7\xc9\x1b\xd0\x56\x47\x8d\x86\x07\x89\x86\x8a\xf1\x1b\x08\x95\xd7\xf6\x81\x47\xc7\x97\x3a\x16\xd6\xbd\xe0\x56\x31\x36\xbc\xe3\xb8\x2e\xd8\x96\xb7\xc8\xa5\xab\x1b\x8c\x7a\x61\xe8\x2f\x9b\x68\x2a\x48\x95\xd4\x2d\x4b\x93\x3c\xea\x68\x68\xbe\xdf\x43\xf6\xdb\xc6\x92\x87\xc3\xe1\xbb\x00\xe7\xce\x18\x92\x51\x3b\x9b\x8b\xa1\x21\x4d\x93\xdc\x68\xfb\x00\x95\xa7\x65\xc1\xba\x9d\xc2\x7b\x21\x6a\xdc\x4a\x65\xb3\x85\x73\x31\x44\x8f\x4d\x97\x48\x57\x8b\xe7\x82\x98\x66\xa3\x6c\xc4\xd1\x34\x15\x66\x13\x21\x43\x78\xf9\x97\xd5\xda\x66\x32\x04\x06\x9e\x4c\xc1\x42\xdc\x19\x0a\x15\x51\x64\xf3\x64\x30\x5f\x0c\xee\xf7\xf1\xc2\xa9\x5d\xa7\x54\xe9\x35\x48\x83\x21\x14\xac\x93\x84\xda\x92\x67\x30\x4f\x93\xe1\xb8\xc6\xd0\xe3\x14\xac\x46\x5f\x6a\xcb\xa3\x6b\xde\x9f\xfe\x9f\xfd\x9b\xc2\x6a\x7c\x5c\xdd\x9a\x23\xb4\xd1\x21\xf2\xd2\xbb\xb6\xe9\x7c\x4a\xf6\x7b\xf0\x68\x4b\x82\xec\x47\xb3\x68\xeb\x00\x87\x43\x9a\x24\x39\xfe\xbd\x9d\xeb\x48\x35\x1b\x6c\x12\x5d\x99\xac\xd8\xef\xb3\xdb\xce\xc5\xc3\xa1\xa7\xd1\xc7\x70\x38\xe4\x02\x9f\xb0\xc9\xaa\x1e\x71\x10\xdd\x9a\x23\x1f\xfc\xca\xee\x52\xc7\xaa\x5d\xf4\x0e\x37\xce\xec\x9a\x9a\xbc\x58\xa0\xb7\x28\x0d\xb1\xf9\x8d\x6b\xbd\x24\x38\x77\x8a\x06\xe8\x5c\x28\xbd\x7e\xb2\x4f\x0c\xfe\xf5\x71\x37\xcb\x67\xc7\x53\x00\xe9\x3c\xc1\x25\xae\xf1\x46\x7a\xdd\xc4\x34\x81\xe2\x9b\xbf\x7e\xea\x9f\xb1\xaf\x0c\x4a\x52\x80\x11\x62\x45\xbd\x38\xb7\xec\x43\xe5\x64\x5b\x93\x8d\x10\x5c\x9f\x37\x58\x52\x00\xe3\x50\xc1\x12\x43\x24\xff\x82\x13\x9e\xc8\x04\x2f\x5f\xf4\x4b\xa7\x28\x5b\x3d\xb6\xe4\x77\xbd\x09\x43\xc8\x27\xd9\x24\x9b\xf6\xd3\xb4\x0a\x2c\x4d\xb4\x8d\x54\x7a\x1d\x77\x05\x0b\x15\x4e\x4e\xdf\xf1\xb3\x45\xa5\xcc\xfa\xd3\x52\x6c\x6f\xef\x7e\x28\x57\x38\xba\x78\x7c\xfb\xb3\xde\x7c\xfa\x30\xfb\x15\xcf\xaf\x6f\xbf\x6c\xef\x3f\x5e\xb7\x91\xcc\xed\x74\x5a\xb0\x34\x91\xde\x85\xe0\xbc\x2e\xb5\x2d\x18\x5a\x67\x77\xb5\x6b\x03\x9b\xe7\x62\x60\xf5\x8a\x22\xbc\x66\xa8\xec\x2a\x64\xd2\xb8\x56\x2d\x0d\x7a\xea\x69\xe2\x0a\xb7\xc2\xe8\x45\x10\x91\x62\x45\x5e\x8c\xb3\x49\x36\x12\xab\x63\x7e\xa4\x0e\xaf\x99\xbf\x9d\x4d\xf9\x95\x59\xd4\xe5\xec\xf2\x6e\x32\xfb\xf8\x81\xcc\xfa\xf2\x77\xd4\xa3\xb1\x99\x7d\xde\xdd\xff\xe1\xef\x3e\xff\x34\x9b\x9c\xd6\x27\xf2\x7e\x44\x17\x17\x37\xe3\xe5\xf7\x4a\xac\xc2\x3b\xfd\xb0\xde\x8d\x4f\xbe\x9c\x94\xed\xd5\x2f\x67\x0c\xfe\x53\x4c\xf2\xcf\x6a\xbe\xf5\x7a\xaf\xbe\xbe\xdd\xab\x57\xae\xa5\xb9\x18\x5e\xd6\x3f\x03\x00\x00\xff\xff\xf9\xd5\xdc\x40\x61\x05\x00\x00")

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 1377, mode: os.FileMode(420), modTime: time.Unix(1474034762, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPlaylistHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x56\xdf\x6f\xdb\x38\x12\x7e\xb6\xff\x8a\x39\x22\x87\x3a\x48\x24\xd9\x6e\xd2\xcb\x25\x96\x0f\x4d\x72\xed\xf5\xc7\x6d\xd3\x34\xd8\x36\x2d\xf2\x40\x93\x63\x89\x0e\x45\xaa\x24\xe5\x44\x1b\xf8\x7f\x5f\x90\xb2\x14\xd7\x6d\xb1\xe8\xfa\xc5\xd4\x68\xe6\x9b\xef\x9b\x19\x52\x9c\xe4\xae\x90\xd3\x3e\x00\xc0\x24\x47\xca\xa7\xfd\xde\xe4\x1f\x51\x04\x97\xf8\xb5\x12\x06\x39\x14\xe8\x28\x38\x9a\x59\xa0\xf2\x8e\xd6\x16\x98\x2e\x10\xe6\xc2\x58\x07\x51\xe4\xdd\x83\x07\xcb\xa9\xb1\xe8\x52\x52\xb9\x79\x74\x44\x3a\xbb\xa2\x05\xa6\x64\x29\xf0\xae\xd4\xc6\x11\x60\x5a\x39\x54\x2e\x25\x77\x82\xbb\x3c\xe5\xb8\x14\x0c\xa3\xf0\xb0\x0f\x42\x09\x27\xa8\x8c\x2c\xa3\x12\xd3\xd1\x3e\xd8\xdc\x08\x75\x1b\x39\x1d\xcd\x85\x4b\x95\x7e\xc4\xcd\x9d\x2b\x23\xcf\x71\x99\x92\xfb\xa8\xa2\x11\xd3\x45\x49\x9d\x98\x49\xdc\x48\x22\x30\x45\x9e\xa1\x0f\xeb\xf7\x26\x4e\x38\x89\xd3\x87\x07\x88\xaf\xfc\x0a\x56\xab\x49\xd2\xd8\xfa\xfd\xde\x44\x0a\x75\x0b\xb9\xc1\x79\x4a\x3c\xb8\x3d\x4e\x92\x82\xde\x33\xae\xe2\x99\xd6\xce\x3a\x43\x4b\xff\xc0\x74\x91\x74\x86\xe4\x20\x1e\xc6\xc3\x88\xca\x32\xa7\xf1\x38\x61\xd6\x3e\xbe\x8b\x0b\xa1\x62\x66\x2d\x01\x83\x32\x25\xd6\xd5\x12\x6d\x8e\xe8\xc8\xb4\xd7\xd4\x3b\x69\x0a\x1e\xd6\x33\xcd\x6b\x2f\x8e\x8b\x25\x30\x49\xad\x4d\x89\x57\x41\x85\x42\xe3\xe9\x37\x0d\x1a\x41\x80\x49\x49\x41\x4d\x26\x54\xe4\x74\x79\x7c\xf8\x4f\xb2\xa5\x29\x1f\xb5\x01\xb4\xc5\x9a\x39\x05\x33\xa7\xa2\xd2\x88\x82\x9a\x9a\xac\x85\x26\x64\x7a\x89\xae\x32\x0a\x9c\x86\x33\x2d\x25\x32\x27\xb4\x9a\x24\xb4\x4b\x69\xda\xd5\x06\x33\xa3\xef\x08\x4c\xfb\xbd\x2d\xba\x32\x2a\x78\x74\xe8\xd9\x36\x11\xb3\xca\x39\xad\xb6\x29\x70\x9c\xd3\x4a\x3a\x02\xae\x2e\x31\x25\x8d\x13\x01\xad\x98\x14\xec\x36\x25\x06\xa5\xa6\x7c\xb0\xeb\xa9\xf9\xd5\x24\x69\x5c\x3a\x58\x5a\x71\xa1\x41\xf0\xa6\x42\x46\xcb\xa6\xe1\x46\x4b\xeb\x7d\x7a\x13\xab\x2b\xc3\x10\xac\x61\x29\x69\xd3\x84\xa0\xa4\x28\x31\x0b\xfc\x7a\xd7\xba\x32\x30\x33\xfa\xce\xa2\x01\xae\xd1\x82\xd2\x0e\x6c\x55\xfa\x31\x05\x97\x23\x34\x69\x50\x62\x81\xca\xc5\x6d\xf2\x24\x98\x3b\x2e\xa1\x3c\xcd\xb2\x92\xad\x52\x29\xac\x8b\x32\xa3\xab\x92\x04\x9a\x56\xab\xcc\xdb\x9a\xcc\x0f\x0f\x60\xa8\xca\x10\x76\xc4\x3e\xec\x58\x38\x4e\x21\xfe\xa0\x55\x66\x61\xb5\x0a\xf4\xa5\xf0\x51\x0f\x0f\x3b\x62\xb5\xfa\x1e\x32\x12\x0e\x8b\xd0\xf1\x1d\x1b\xba\x2d\x45\x0b\x8b\x8a\x37\x18\x0d\xd3\x4a\x4e\x9b\xa5\x6f\x54\xc2\xc5\xf2\xaf\x3b\x26\x8a\x2c\x94\xcd\xcf\xd3\x99\x5e\xa2\x81\x47\x0a\xa2\xc8\x22\xa3\x2b\xc5\xfd\xa1\x10\xdd\x47\xb4\x72\x1a\x78\x34\x93\x9a\xdd\x12\xa0\xd2\x79\x40\x1f\x42\x8d\x1f\xf1\xed\xcc\x0d\xa7\x66\x3d\x49\xba\xd9\x0e\x5b\xcf\x32\x23\x4a\xe7\x9d\x92\x04\x2e\xa8\xb5\x40\x8d\xa1\x35\xe8\x39\xd8\x50\x19\x3f\x07\xc8\x61\x56\xc3\x4b\x1d\xbc\x96\xd4\x40\x29\x69\xed\xeb\x02\x29\x7c\x21\x05\x72\x41\x13\x4b\x8b\x52\xe2\x28\x2e\xca\xa7\x64\x1f\xbe\x31\x8e\x83\xf1\xa6\xdf\x83\xed\xd8\x9b\x93\xd6\xa8\xad\xf0\xe3\x0f\x29\x0c\x5b\x5b\xdb\x3b\x48\x81\x6b\x56\x85\x59\xc8\xd0\xfd\xb7\x19\x0b\x7b\x5a\x9f\xf9\xea\xfc\x46\x0b\x1c\x7c\xd7\xa4\xdd\x16\x84\x56\xfc\xc7\xf1\xa7\xf5\x2b\x3e\xe8\xc6\x38\xf8\x77\xe3\x11\x5f\x50\x97\x37\x43\xd1\xd1\x8d\xcb\xca\xe6\x03\xdf\x1d\x58\xad\x5a\xf7\xb6\xed\xd0\xef\xc1\xbc\x52\x61\x07\x83\x45\xf7\x9c\x39\xb1\xc4\x81\xe0\xf7\xbb\xf0\xd0\x34\x00\xe6\xda\xc0\xc0\x53\x12\x41\x24\x08\x98\x74\x12\x63\x89\x2a\x73\xf9\x09\x88\xbd\xbd\x10\xd1\xeb\x5e\x7d\x11\x37\x71\x18\x83\xb7\xde\xcf\x60\xa1\x97\x38\x78\x42\x43\x82\x27\x81\x87\xff\xad\xd6\xff\x3f\x13\xea\x99\x6c\xc0\x50\xce\xbf\xc5\x58\x35\x03\x70\xf5\xee\xfc\xdd\x31\x3c\xe7\x1c\xec\xad\x28\xbb\xbd\xdd\xef\xf9\x3a\xc6\xd6\x30\x48\xbb\x82\x7c\x19\x86\xee\xf9\x17\xde\x34\x08\x38\x8f\xda\xdb\x8e\x06\x73\x92\xc0\xff\xe9\x2d\x42\x68\x27\x17\xd6\x07\x00\xab\x8c\x41\xe5\x82\xd2\x35\x90\x56\x18\x86\x3c\xed\xaa\x39\x78\x2c\x60\x8b\xb8\xb7\xd7\xaa\x4e\x92\xae\x3b\x36\x17\x73\x37\xd8\x7d\x7c\xb3\xd6\xf2\x06\xd1\xeb\x28\xeb\x50\x7f\x83\x3e\x40\xa8\xec\x3f\x6b\xbf\x1f\xc8\x6a\xd3\xdc\x9c\x6c\xf8\x34\xe7\xe2\xa6\xe5\x51\xb3\xff\xfd\x44\xf7\xea\x64\x73\x30\xda\xe3\x75\xad\x48\x6a\x46\xbd\x3d\x6e\xed\x27\x7e\xd7\xc2\xca\x6f\xcb\xa4\xdb\x97\xe1\x4a\x70\xda\x7e\xd9\x80\x69\x83\xf0\x9a\x2e\xe9\x87\xe0\xb0\x4e\x9f\xfe\xf2\x6f\x7d\x81\xf0\xe0\x17\x92\x32\xe4\x40\x9b\xb3\xd7\x8f\xb4\x9e\x87\x65\x3b\x4c\x60\x75\x78\x2e\x69\x86\xcd\x81\x00\x73\x6a\x1d\x9a\x35\x88\xdd\xa0\x12\x4e\xfe\xf6\x23\xce\x34\xc7\x78\xf1\xb5\x42\x53\x87\x8f\x77\xb3\x8c\xc6\xf1\x38\x3e\x08\xdf\xe8\x85\x25\x4d\x98\x50\x0e\x33\x23\x5c\x9d\x12\x9b\xd3\xf1\xe1\xb3\xe8\x74\x96\x73\xb9\x7c\x3f\x4f\xee\xaf\xae\xff\x9d\x2d\xe8\xf0\xfc\xeb\xd3\xff\x89\xbb\xf7\x2f\x8e\xde\xd2\xb3\xcb\xab\x4f\xf7\x9f\xdf\x5c\x56\x0e\xe5\xd5\xc1\x41\xba\x06\x61\x46\x5b\xab\x8d\xc8\x84\x4a\x09\x55\x5a\xd5\x85\xae\x2c\x99\x76\xd5\xec\x75\x64\xb7\x78\x72\xb5\xb0\x31\x93\xba\xe2\x73\x49\x0d\x06\xb2\x74\x41\xef\x13\x29\x66\x36\x71\xe8\x72\x34\xc9\x28\x1e\xc7\xc3\x64\xd1\x3e\xb7\x02\xb6\xb8\x3f\x3d\x3a\x88\x2e\xe4\xac\xc8\x8e\x5e\x5f\x8f\x8f\xde\xbc\x40\xb9\x7c\xfd\x3b\x15\xc3\x91\x3c\xfa\x58\x7f\xfe\xc3\x5c\x7f\x7c\x79\x34\x3e\x2c\xf6\xd8\xe7\x21\x9e\x9f\x7f\x18\xcd\xff\xc5\x93\x85\x7d\x26\x6e\x97\xf5\x68\xef\xd3\x5e\x56\x5d\xbc\x3a\x25\x7f\x5f\xca\xaf\xde\x9b\x16\xdb\xd7\xa6\xc5\x66\x96\xf5\x65\xa9\xb9\x21\x4d\x92\xe6\xc2\xfa\x67\x00\x00\x00\xff\xff\xb7\xba\xf4\x8c\xb8\x0a\x00\x00")

func dataPlaylistHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataPlaylistHtml,
		"data/playlist.html",
	)
}

func dataPlaylistHtml() (*asset, error) {
	bytes, err := dataPlaylistHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/playlist.html", size: 2744, mode: os.FileMode(420), modTime: time.Unix(1474037212, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/index.html": dataIndexHtml,
	"data/playlist.html": dataPlaylistHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{dataIndexHtml, map[string]*bintree{}},
		"playlist.html": &bintree{dataPlaylistHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

