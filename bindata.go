// Code generated by go-bindata.
// sources:
// data/index.html
// data/playlist.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x54\xdd\x6e\xe3\x36\x13\xbd\x96\x9e\x62\x3e\x02\x1f\x7a\x91\xa5\x68\x7b\x9d\xad\xbb\x90\x0c\x34\x09\xb6\x6d\xb6\x40\xb3\x49\xd0\xdd\xe4\x6e\x4c\x8e\x25\x3a\x14\xa9\x90\x94\x7f\x6a\xf8\xdd\x0b\x49\x71\xd2\x6c\xd1\x16\xab\xab\x99\xd1\xf0\xf0\x9c\xc3\x21\xf3\x2a\xd6\x66\x9e\x02\x00\xe4\x15\xa1\x9a\xa7\x49\xfe\x3f\xce\xe1\x9a\x1e\x5b\xed\x49\x41\x4d\x11\x21\x62\x19\x00\xcd\x06\x77\x01\xa4\xab\x09\x96\xda\x87\x08\x9c\x77\xed\x7d\x87\xac\xd0\x07\x8a\x05\x6b\xe3\x92\xcf\xd8\x73\xdd\x62\x4d\x05\x5b\x6b\xda\x34\xce\x47\x06\xd2\xd9\x48\x36\x16\x6c\xa3\x55\xac\x0a\x45\x6b\x2d\x89\xf7\xc9\x1b\xd0\x56\x47\x8d\x86\x07\x89\x86\x8a\xf1\x1b\x08\x95\xd7\xf6\x81\x47\xc7\x97\x3a\x16\xd6\xbd\xe0\x56\x31\x36\xbc\xe3\xb8\x2e\xd8\x96\xb7\xc8\xa5\xab\x1b\x8c\x7a\x61\xe8\x2f\x9b\x68\x2a\x48\x95\xd4\x2d\x4b\x93\x3c\xea\x68\x68\xbe\xdf\x43\xf6\xdb\xc6\x92\x87\xc3\xe1\xbb\x00\xe7\xce\x18\x92\x51\x3b\x9b\x8b\xa1\x21\x4d\x93\xdc\x68\xfb\x00\x95\xa7\x65\xc1\xba\x9d\xc2\x7b\x21\x6a\xdc\x4a\x65\xb3\x85\x73\x31\x44\x8f\x4d\x97\x48\x57\x8b\xe7\x82\x98\x66\xa3\x6c\xc4\xd1\x34\x15\x66\x13\x21\x43\x78\xf9\x97\xd5\xda\x66\x32\x04\x06\x9e\x4c\xc1\x42\xdc\x19\x0a\x15\x51\x64\xf3\x64\x30\x5f\x0c\xee\xf7\xf1\xc2\xa9\x5d\xa7\x54\xe9\x35\x48\x83\x21\x14\xac\x93\x84\xda\x92\x67\x30\x4f\x93\xe1\xb8\xc6\xd0\xe3\x14\xac\x46\x5f\x6a\xcb\xa3\x6b\xde\x9f\xfe\x9f\xfd\x9b\xc2\x6a\x7c\x5c\xdd\x9a\x23\xb4\xd1\x21\xf2\xd2\xbb\xb6\xe9\x7c\x4a\xf6\x7b\xf0\x68\x4b\x82\xec\x47\xb3\x68\xeb\x00\x87\x43\x9a\x24\x39\xfe\xbd\x9d\xeb\x48\x35\x1b\x6c\x12\x5d\x99\xac\xd8\xef\xb3\xdb\xce\xc5\xc3\xa1\xa7\xd1\xc7\x70\x38\xe4\x02\x9f\xb0\xc9\xaa\x1e\x71\x10\xdd\x9a\x23\x1f\xfc\xca\xee\x52\xc7\xaa\x5d\xf4\x0e\x37\xce\xec\x9a\x9a\xbc\x58\xa0\xb7\x28\x0d\xb1\xf9\x8d\x6b\xbd\x24\x38\x77\x8a\x06\xe8\x5c\x28\xbd\x7e\xb2\x4f\x0c\xfe\xf5\x71\x37\xcb\x67\xc7\x53\x00\xe9\x3c\xc1\x25\xae\xf1\x46\x7a\xdd\xc4\x34\x81\xe2\x9b\xbf\x7e\xea\x9f\xb1\xaf\x0c\x4a\x52\x80\x11\x62\x45\xbd\x38\xb7\xec\x43\xe5\x64\x5b\x93\x8d\x10\x5c\x9f\x37\x58\x52\x00\xe3\x50\xc1\x12\x43\x24\xff\x82\x13\x9e\xc8\x04\x2f\x5f\xf4\x4b\xa7\x28\x5b\x3d\xb6\xe4\x77\xbd\x09\x43\xc8\x27\xd9\x24\x9b\xf6\xd3\xb4\x0a\x2c\x4d\xb4\x8d\x54\x7a\x1d\x77\x05\x0b\x15\x4e\x4e\xdf\xf1\xb3\x45\xa5\xcc\xfa\xd3\x52\x6c\x6f\xef\x7e\x28\x57\x38\xba\x78\x7c\xfb\xb3\xde\x7c\xfa\x30\xfb\x15\xcf\xaf\x6f\xbf\x6c\xef\x3f\x5e\xb7\x91\xcc\xed\x74\x5a\xb0\x34\x91\xde\x85\xe0\xbc\x2e\xb5\x2d\x18\x5a\x67\x77\xb5\x6b\x03\x9b\xe7\x62\x60\xf5\x8a\x22\xbc\x66\xa8\xec\x2a\x64\xd2\xb8\x56\x2d\x0d\x7a\xea\x69\xe2\x0a\xb7\xc2\xe8\x45\x10\x91\x62\x45\x5e\x8c\xb3\x49\x36\x12\xab\x63\x7e\xa4\x0e\xaf\x99\xbf\x9d\x4d\xf9\x95\x59\xd4\xe5\xec\xf2\x6e\x32\xfb\xf8\x81\xcc\xfa\xf2\x77\xd4\xa3\xb1\x99\x7d\xde\xdd\xff\xe1\xef\x3e\xff\x34\x9b\x9c\xd6\x27\xf2\x7e\x44\x17\x17\x37\xe3\xe5\xf7\x4a\xac\xc2\x3b\xfd\xb0\xde\x8d\x4f\xbe\x9c\x94\xed\xd5\x2f\x67\x0c\xfe\x53\x4c\xf2\xcf\x6a\xbe\xf5\x7a\xaf\xbe\xbe\xdd\xab\x57\xae\xa5\xb9\x18\x5e\xd6\x3f\x03\x00\x00\xff\xff\xf9\xd5\xdc\x40\x61\x05\x00\x00")

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 1377, mode: os.FileMode(420), modTime: time.Unix(1474034762, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPlaylistHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x56\xdf\x6f\xdb\x38\x12\x7e\xb6\xff\x8a\x39\x22\x87\xba\x48\x24\xd9\x6e\xd2\xcb\x25\x96\x0f\x4d\x72\xed\xf6\xc7\x6e\xd3\x34\xd8\x36\x2d\xfa\x40\x93\x23\x89\x0e\x45\xaa\x24\xe5\x44\x1b\xf8\x7f\x5f\x90\xb2\x94\xd4\xdd\x62\xd1\xf5\x8b\xa9\xd1\xcc\x37\xdf\x37\x33\xa4\x38\x2b\x5c\x29\xe7\x43\x00\x80\x59\x81\x94\xcf\x87\x83\xd9\xbf\xa2\x08\x2e\xf0\x6b\x2d\x0c\x72\x28\xd1\x51\x70\x34\xb7\x40\xe5\x0d\x6d\x2c\x30\x5d\x22\x64\xc2\x58\x07\x51\xe4\xdd\x83\x07\x2b\xa8\xb1\xe8\x52\x52\xbb\x2c\x3a\x24\xbd\x5d\xd1\x12\x53\xb2\x12\x78\x53\x69\xe3\x08\x30\xad\x1c\x2a\x97\x92\x1b\xc1\x5d\x91\x72\x5c\x09\x86\x51\x78\xd8\x03\xa1\x84\x13\x54\x46\x96\x51\x89\xe9\x64\x0f\x6c\x61\x84\xba\x8e\x9c\x8e\x32\xe1\x52\xa5\xef\x71\x0b\xe7\xaa\xc8\x73\x5c\xa5\xe4\x36\xaa\x69\xc4\x74\x59\x51\x27\x16\x12\x1f\x24\x11\x98\x22\xcf\xd1\x87\x0d\x07\x33\x27\x9c\xc4\xf9\xdd\x1d\xc4\x97\x7e\x05\xeb\xf5\x2c\x69\x6d\xc3\xe1\x60\x26\x85\xba\x86\xc2\x60\x96\x12\x0f\x6e\x8f\x92\xa4\xa4\xb7\x8c\xab\x78\xa1\xb5\xb3\xce\xd0\xca\x3f\x30\x5d\x26\xbd\x21\xd9\x8f\xc7\xf1\x38\xa2\xb2\x2a\x68\x3c\x4d\x98\xb5\xf7\xef\xe2\x52\xa8\x98\x59\x4b\xc0\xa0\x4c\x89\x75\x8d\x44\x5b\x20\x3a\x32\x1f\xb4\xf5\x4e\xda\x82\x87\xf5\x42\xf3\xc6\x8b\xe3\x62\x05\x4c\x52\x6b\x53\xe2\x55\x50\xa1\xd0\x78\xfa\x6d\x83\x26\x10\x60\x52\x52\x52\x93\x0b\x15\x39\x5d\x1d\x1d\xfc\x9b\x6c\x69\x2a\x26\x5d\x00\xed\xb0\x16\x4e\xc1\xc2\xa9\xa8\x32\xa2\xa4\xa6\x21\x1b\xa1\x09\x99\x5f\xa0\xab\x8d\x02\xa7\xe1\x54\x4b\x89\xcc\x09\xad\x66\x09\xed\x53\x9a\x6e\xf5\x80\x99\xd1\x37\x04\xe6\xc3\xc1\x16\x5d\x19\x95\x3c\x3a\xf0\x6c\xdb\x88\x45\xed\x9c\x56\xdb\x14\x38\x66\xb4\x96\x8e\x80\x6b\x2a\x4c\x49\xeb\x44\x40\x2b\x26\x05\xbb\x4e\x89\x41\xa9\x29\x1f\x3d\xf6\xd4\xfc\x6a\x96\xb4\x2e\x3d\x2c\xad\xb9\xd0\x20\x78\x5b\x21\xa3\x65\xdb\x70\xa3\xa5\xf5\x3e\x83\x99\xd5\xb5\x61\x08\xd6\xb0\x94\x74\x69\x42\x50\x52\x56\x98\x07\x7e\x83\x2b\x5d\x1b\x58\x18\x7d\x63\xd1\x00\xd7\x68\x41\x69\x07\xb6\xae\xfc\x98\x82\x2b\x10\xda\x34\x28\xb1\x44\xe5\xe2\x2e\x79\x12\xcc\x3d\x97\x50\x9e\x76\x59\xcb\x4e\xa9\x14\xd6\x45\xb9\xd1\x75\x45\x02\x4d\xab\x55\xee\x6d\x6d\xe6\xbb\x3b\x30\x54\xe5\x08\x3b\x62\x0f\x76\x2c\x1c\xa5\x10\xbf\xd7\x2a\xb7\xb0\x5e\x07\xfa\x52\xf8\xa8\xbb\xbb\x1d\xb1\x5e\x7f\x0f\x19\x09\x87\x65\xe8\xf8\x8e\x0d\xdd\x96\xa2\x83\x45\xc5\x5b\x8c\x96\x69\x2d\xe7\xed\xd2\x37\x2a\xe1\x62\xf5\xf7\x1d\x13\x65\x1e\xca\xe6\xe7\xe9\x54\xaf\xd0\xc0\x3d\x05\x51\xe6\x91\xd1\xb5\xe2\xfe\x50\x88\x6e\x23\x5a\x3b\x0d\x3c\x5a\x48\xcd\xae\x09\x50\xe9\x3c\xa0\x0f\xa1\xc6\x8f\xf8\x76\xe6\x96\x53\xbb\x9e\x25\xfd\x6c\x87\xad\x67\x99\x11\x95\xf3\x4e\x49\x02\xe7\xd4\x5a\xa0\xc6\xd0\x06\x74\x06\x36\x54\xc6\xcf\x01\x72\x58\x34\xf0\x42\x07\xaf\x15\x35\x50\x49\xda\xf8\xba\x40\x0a\x9f\x49\x89\x5c\xd0\xc4\xd2\xb2\x92\x38\x89\xcb\xea\x09\xd9\x83\x6f\x8c\xd3\x60\xfc\x32\x1c\xc0\x76\xec\x97\xe3\xce\xa8\xad\xf0\xe3\x0f\x29\x8c\x3b\x5b\xd7\x3b\x48\x81\x6b\x56\x87\x59\xc8\xd1\xfd\xbf\x1d\x0b\x7b\xd2\x9c\xfa\xea\xfc\x46\x4b\x1c\x7d\xd7\xa4\xc7\x1d\x08\xad\xf9\x5f\xc7\x9f\x34\x2f\xf9\xa8\x1f\xe3\xe0\xdf\x8f\x47\x7c\x4e\x5d\xd1\x0e\x45\x4f\x37\xae\x6a\x5b\x8c\x7c\x77\x60\xbd\xee\xdc\xbb\xb6\xc3\x70\x00\x59\xad\xc2\x0e\x06\x8b\xee\x19\x73\x62\x85\x23\xc1\x6f\x1f\xc3\x5d\xdb\x00\xc8\xb4\x81\x91\xa7\x24\x82\x48\x10\x30\xeb\x25\xc6\x12\x55\xee\x8a\x63\x10\xbb\xbb\x21\x62\xd0\xbf\xfa\x2c\xbe\xc4\x61\x0c\xde\x78\x3f\x83\xa5\x5e\xe1\xe8\x11\x0d\x09\x1e\x05\x1e\xfe\xb7\xde\xfc\xff\x48\xa8\x67\xf2\x00\x86\x72\xfe\x2d\xc6\xba\x1d\x80\xcb\xb7\x67\x6f\x8f\xe0\x19\xe7\x60\xaf\x45\xd5\xef\xed\xe1\xc0\xd7\x31\xb6\x86\x41\xda\x17\xe4\xf3\x38\x74\xcf\xbf\xf0\xa6\x51\xc0\xb9\xd7\xde\x75\x34\x98\x93\x04\x7e\xa5\xd7\x08\xa1\x9d\x5c\x58\x1f\x00\xac\x36\x06\x95\x0b\x4a\x37\x40\x5a\x61\x18\xf2\xb4\xaf\xe6\xe8\xbe\x80\x1d\xe2\xee\x6e\xa7\xba\xef\x8d\x2d\x44\xe6\x46\x7d\x35\x7a\x25\xaf\x11\xbd\x8a\xaa\x09\xd5\x37\xe8\x03\x84\xca\xff\xb7\xf1\xfb\xa1\xa8\xee\x65\x7b\x1c\x3e\xb4\xdc\x4b\xf5\xbf\x1f\xc8\x5d\x1f\x3f\x9c\x87\xee\x54\xdd\x08\x91\x9a\x51\x6f\x8f\x3b\xfb\xb1\xdf\xac\xb0\xf6\xbb\x31\xe9\xb7\x63\xb8\x09\x9c\x74\x1f\x34\x60\xda\x20\xbc\xa2\x2b\xfa\x3e\x38\x6c\xd2\xa7\x3f\xfd\xdb\xdc\x1b\x3c\xf8\xb9\xa4\x0c\x39\xd0\xf6\xc8\xf5\x93\xac\xb3\xb0\xec\x66\x08\xac\x0e\xcf\x15\xcd\xb1\x3d\x07\x20\xa3\xd6\xa1\xd9\x80\xd8\x07\x54\xc2\x81\xdf\x7d\xbb\x99\xe6\x18\x2f\xbf\xd6\x68\x9a\xf0\xcd\x6e\x97\xd1\x34\x9e\xc6\xfb\xe1\xd3\xbc\xb4\xa4\x0d\x13\xca\x61\x6e\x84\x6b\x52\x62\x0b\x3a\x3d\x78\x1a\x9d\x2c\x0a\x2e\x57\xef\xb2\xe4\xf6\xf2\xea\xbf\xf9\x92\x8e\xcf\xbe\x3e\xf9\x45\xdc\xbc\x7b\x7e\xf8\x86\x9e\x5e\x5c\x7e\xbc\xfd\xf4\xfa\xa2\x76\x28\x2f\xf7\xf7\xd3\x0d\x08\x33\xda\x5a\x6d\x44\x2e\x54\x4a\xa8\xd2\xaa\x29\x75\x6d\xc9\xbc\xaf\xe6\xa0\x27\xbb\xc5\x93\xab\xa5\x8d\x99\xd4\x35\xcf\x24\x35\x18\xc8\xd2\x25\xbd\x4d\xa4\x58\xd8\xc4\xa1\x2b\xd0\x24\x93\x78\x1a\x8f\x93\x65\xf7\xdc\x09\xd8\xe2\xfe\xe4\x70\x3f\x3a\x97\x8b\x32\x3f\x7c\x75\x35\x3d\x7c\xfd\x1c\xe5\xea\xd5\xef\x54\x8c\x27\xf2\xf0\x43\xf3\xe9\x0f\x73\xf5\xe1\xc5\xe1\xf4\xa0\xdc\x65\x9f\xc6\x78\x76\xf6\x7e\x92\xfd\x87\x27\x4b\xfb\x54\x5c\xaf\x9a\xc9\xee\xc7\xdd\xbc\x3e\x7f\x79\x42\xfe\xb9\x94\x9f\xbd\x2e\x2d\xb7\x6f\x4b\xcb\x87\x59\x36\x77\xa4\xf6\x62\x34\x4b\xda\x7b\xea\x9f\x01\x00\x00\xff\xff\x25\x9a\xaa\x65\xaf\x0a\x00\x00")

func dataPlaylistHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataPlaylistHtml,
		"data/playlist.html",
	)
}

func dataPlaylistHtml() (*asset, error) {
	bytes, err := dataPlaylistHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/playlist.html", size: 2735, mode: os.FileMode(420), modTime: time.Unix(1474034661, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/index.html": dataIndexHtml,
	"data/playlist.html": dataPlaylistHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{dataIndexHtml, map[string]*bintree{}},
		"playlist.html": &bintree{dataPlaylistHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

